<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.11.3 on win32)" generated="20240415 12:02:06.454" rpa="false" schemaversion="3">
<suite id="s1" name="Extract" source="C:\Users\ftmh\SpringerAbstractExtractor\Extract.robot">
<test id="s1-t1" name="Extract Article Papers Abstracts" line="20">
<kw name="Extract Abstracts">
<arg>${ArticleUrl}</arg>
<arg>${ArtileFile}</arg>
<kw name="Set Selenium Timeout" library="SeleniumLibrary">
<arg>40 seconds</arg>
<doc>Sets the timeout that is used by various keywords.</doc>
<status status="PASS" starttime="20240415 12:02:19.052" endtime="20240415 12:02:19.052"/>
</kw>
<kw name="Open Browser" library="SeleniumLibrary">
<arg>browser=${BROWSER}</arg>
<arg>options=add_experimental_option("detach",True)</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20240415 12:02:19.053" level="INFO">Opening browser 'headlesschrome' to base url 'None'.</msg>
<status status="PASS" starttime="20240415 12:02:19.052" endtime="20240415 12:02:26.976"/>
</kw>
<kw name="Go To" library="SeleniumLibrary">
<arg>${Url}</arg>
<doc>Navigates the current browser window to the provided ``url``.</doc>
<msg timestamp="20240415 12:02:26.976" level="INFO">Opening url 'https://link.springer.com/search?facet-language=%22En%22&amp;showAll=true&amp;date-facet-mode=between&amp;query=%22useful+work%22+AND+%28consensus+OR++OR+blockchain+OR++OR+proof%29&amp;facet-discipline=%22Computer+Science%22&amp;facet-content-type=%22Article%22'</msg>
<status status="PASS" starttime="20240415 12:02:26.976" endtime="20240415 12:02:38.775"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>xpath:/html/body/dialog/div[2]/div/div[2]/button</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:02:38.775" endtime="20240415 12:02:43.404"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>xpath:/html/body/dialog/div[2]/div/div[2]/button</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:02:43.404" level="INFO">Clicking element 'xpath:/html/body/dialog/div[2]/div/div[2]/button'.</msg>
<status status="PASS" starttime="20240415 12:02:43.404" endtime="20240415 12:02:43.784"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>//*[@id="main"]/div/div[1]/div/div[1]/div/p/a</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:02:43.784" endtime="20240415 12:02:43.820"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>//*[@id="main"]/div/div[1]/div/div[1]/div/p/a</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:02:43.821" level="INFO">Clicking element '//*[@id="main"]/div/div[1]/div/div[1]/div/p/a'.</msg>
<status status="PASS" starttime="20240415 12:02:43.821" endtime="20240415 12:02:48.054"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${NumOfPages}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:02:48.054" endtime="20240415 12:02:48.085"/>
</kw>
<kw name="Go To" library="SeleniumLibrary">
<arg>${Url}</arg>
<doc>Navigates the current browser window to the provided ``url``.</doc>
<msg timestamp="20240415 12:02:48.085" level="INFO">Opening url 'https://link.springer.com/search?facet-language=%22En%22&amp;showAll=true&amp;date-facet-mode=between&amp;query=%22useful+work%22+AND+%28consensus+OR++OR+blockchain+OR++OR+proof%29&amp;facet-discipline=%22Computer+Science%22&amp;facet-content-type=%22Article%22'</msg>
<status status="PASS" starttime="20240415 12:02:48.085" endtime="20240415 12:02:50.018"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${NumOfPages}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:02:50.018" endtime="20240415 12:02:50.120"/>
</kw>
<kw name="Get Text" library="SeleniumLibrary">
<var>${NumOfPagesTxt}</var>
<arg>${NumOfPages}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:02:50.318" level="INFO">${NumOfPagesTxt} = 6</msg>
<status status="PASS" starttime="20240415 12:02:50.121" endtime="20240415 12:02:50.318"/>
</kw>
<for flavor="IN RANGE">
<var>${page}</var>
<value>${NumOfPagesTxt}</value>
<iter>
<var name="${page}">0</var>
<kw name="Get Element Count" library="SeleniumLibrary">
<var>${NumOfTitleInPage}</var>
<arg>${title}</arg>
<doc>Returns the number of elements matching ``locator``.</doc>
<msg timestamp="20240415 12:02:50.338" level="INFO">${NumOfTitleInPage} = 20</msg>
<status status="PASS" starttime="20240415 12:02:50.319" endtime="20240415 12:02:50.338"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>1</value>
<value>${NumOfTitleInPage}</value>
<iter>
<var name="${index}">1</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:02:50.339" level="INFO">${TitleElement} = (//a[@class="title"])[1]</msg>
<status status="PASS" starttime="20240415 12:02:50.338" endtime="20240415 12:02:50.339"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:02:50.339" endtime="20240415 12:02:50.369"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:02:50.369" level="INFO">Clicking element '(//a[@class="title"])[1]'.</msg>
<status status="PASS" starttime="20240415 12:02:50.369" endtime="20240415 12:03:21.623"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:03:21.623" endtime="20240415 12:03:21.688"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:03:21.721" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:03:21.688" endtime="20240415 12:03:21.721"/>
</kw>
<msg timestamp="20240415 12:03:21.721" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:03:21.688" endtime="20240415 12:03:21.721"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:03:21.745" level="INFO">${abstractTxt} = Blockchain-based consensus methods such as PoW (Proof of Work) and PoS (Proof of Stake) are widely used and favored these days, but each has disadvantages. One of the significant issues PoW encountere...</msg>
<status status="PASS" starttime="20240415 12:03:21.721" endtime="20240415 12:03:21.745"/>
</kw>
<status status="PASS" starttime="20240415 12:03:21.721" endtime="20240415 12:03:21.745"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:03:21.745" endtime="20240415 12:03:21.745"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:03:21.745" endtime="20240415 12:03:21.745"/>
</branch>
<status status="PASS" starttime="20240415 12:03:21.721" endtime="20240415 12:03:21.745"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:03:23.053" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:03:21.746" endtime="20240415 12:03:23.067"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:03:23.067" endtime="20240415 12:03:24.214"/>
</kw>
<status status="PASS" starttime="20240415 12:02:50.338" endtime="20240415 12:03:24.214"/>
</iter>
<iter>
<var name="${index}">2</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:03:24.215" level="INFO">${TitleElement} = (//a[@class="title"])[2]</msg>
<status status="PASS" starttime="20240415 12:03:24.214" endtime="20240415 12:03:24.215"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:03:24.215" endtime="20240415 12:03:24.340"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:03:24.341" level="INFO">Clicking element '(//a[@class="title"])[2]'.</msg>
<status status="PASS" starttime="20240415 12:03:24.340" endtime="20240415 12:03:55.633"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:03:55.633" endtime="20240415 12:03:55.678"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:03:55.709" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:03:55.679" endtime="20240415 12:03:55.710"/>
</kw>
<msg timestamp="20240415 12:03:55.710" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:03:55.678" endtime="20240415 12:03:55.710"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:03:55.758" level="INFO">${abstractTxt} = To analyze the research impact of the researcher, different bibliographic databases like Scopus, Web of Science, Google Scholar, etc. are accessed for evaluating the trend of publications and citation...</msg>
<status status="PASS" starttime="20240415 12:03:55.710" endtime="20240415 12:03:55.758"/>
</kw>
<status status="PASS" starttime="20240415 12:03:55.710" endtime="20240415 12:03:55.758"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:03:55.758" endtime="20240415 12:03:55.758"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:03:55.758" endtime="20240415 12:03:55.758"/>
</branch>
<status status="PASS" starttime="20240415 12:03:55.710" endtime="20240415 12:03:55.758"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:03:55.780" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:03:55.758" endtime="20240415 12:03:55.795"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:03:55.795" endtime="20240415 12:03:56.932"/>
</kw>
<status status="PASS" starttime="20240415 12:03:24.214" endtime="20240415 12:03:56.932"/>
</iter>
<iter>
<var name="${index}">3</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:03:56.933" level="INFO">${TitleElement} = (//a[@class="title"])[3]</msg>
<status status="PASS" starttime="20240415 12:03:56.933" endtime="20240415 12:03:56.933"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:03:56.934" endtime="20240415 12:03:57.062"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:03:57.063" level="INFO">Clicking element '(//a[@class="title"])[3]'.</msg>
<status status="PASS" starttime="20240415 12:03:57.062" endtime="20240415 12:04:36.795"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:04:36.796" endtime="20240415 12:04:36.833"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:04:36.860" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:04:36.834" endtime="20240415 12:04:36.860"/>
</kw>
<msg timestamp="20240415 12:04:36.860" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:04:36.833" endtime="20240415 12:04:36.860"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:04:36.886" level="INFO">${abstractTxt} = Decentralization for data storage is a challenging problem for blockchain-based solutions as the blocksize plays a key role for scalability. In addition, specific requirements of multimedia data call ...</msg>
<status status="PASS" starttime="20240415 12:04:36.861" endtime="20240415 12:04:36.886"/>
</kw>
<status status="PASS" starttime="20240415 12:04:36.860" endtime="20240415 12:04:36.886"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:04:36.886" endtime="20240415 12:04:36.886"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:04:36.886" endtime="20240415 12:04:36.886"/>
</branch>
<status status="PASS" starttime="20240415 12:04:36.860" endtime="20240415 12:04:36.886"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:04:36.966" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:04:36.887" endtime="20240415 12:04:37.115"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:04:37.116" endtime="20240415 12:04:38.186"/>
</kw>
<status status="PASS" starttime="20240415 12:03:56.932" endtime="20240415 12:04:38.186"/>
</iter>
<iter>
<var name="${index}">4</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:04:38.187" level="INFO">${TitleElement} = (//a[@class="title"])[4]</msg>
<status status="PASS" starttime="20240415 12:04:38.186" endtime="20240415 12:04:38.187"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:04:38.187" endtime="20240415 12:04:38.309"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:04:38.310" level="INFO">Clicking element '(//a[@class="title"])[4]'.</msg>
<status status="PASS" starttime="20240415 12:04:38.309" endtime="20240415 12:04:59.351"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:04:59.351" endtime="20240415 12:04:59.410"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:04:59.428" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:04:59.411" endtime="20240415 12:04:59.428"/>
</kw>
<msg timestamp="20240415 12:04:59.428" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:04:59.410" endtime="20240415 12:04:59.428"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:04:59.464" level="INFO">${abstractTxt} = Blockchain networks have attracted tremendous attention for creating cryptocurrencies and decentralized economies built on peer-to-peer protocols. However, the complex nature of the dynamics and feedb...</msg>
<status status="PASS" starttime="20240415 12:04:59.428" endtime="20240415 12:04:59.465"/>
</kw>
<status status="PASS" starttime="20240415 12:04:59.428" endtime="20240415 12:04:59.465"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:04:59.465" endtime="20240415 12:04:59.465"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:04:59.465" endtime="20240415 12:04:59.465"/>
</branch>
<status status="PASS" starttime="20240415 12:04:59.428" endtime="20240415 12:04:59.465"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:04:59.523" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:04:59.465" endtime="20240415 12:04:59.527"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:04:59.527" endtime="20240415 12:05:00.379"/>
</kw>
<status status="PASS" starttime="20240415 12:04:38.186" endtime="20240415 12:05:00.379"/>
</iter>
<iter>
<var name="${index}">5</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:05:00.381" level="INFO">${TitleElement} = (//a[@class="title"])[5]</msg>
<status status="PASS" starttime="20240415 12:05:00.380" endtime="20240415 12:05:00.381"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:05:00.381" endtime="20240415 12:05:00.428"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:05:00.429" level="INFO">Clicking element '(//a[@class="title"])[5]'.</msg>
<status status="PASS" starttime="20240415 12:05:00.428" endtime="20240415 12:05:23.631"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:05:23.631" endtime="20240415 12:05:23.691"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:05:23.715" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:05:23.692" endtime="20240415 12:05:23.715"/>
</kw>
<msg timestamp="20240415 12:05:23.715" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:05:23.691" endtime="20240415 12:05:23.715"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:05:23.746" level="INFO">${abstractTxt} = In Web 2.0-based social networks, users suffer from authorities of service providers and politicians, such as revoking users, removing content, and selling users’ sensitive information. The concept of...</msg>
<status status="PASS" starttime="20240415 12:05:23.715" endtime="20240415 12:05:23.758"/>
</kw>
<status status="PASS" starttime="20240415 12:05:23.715" endtime="20240415 12:05:23.759"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:05:23.759" endtime="20240415 12:05:23.759"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:05:23.759" endtime="20240415 12:05:23.759"/>
</branch>
<status status="PASS" starttime="20240415 12:05:23.715" endtime="20240415 12:05:23.759"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:05:23.782" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:05:23.759" endtime="20240415 12:05:23.782"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:05:23.782" endtime="20240415 12:05:24.660"/>
</kw>
<status status="PASS" starttime="20240415 12:05:00.380" endtime="20240415 12:05:24.660"/>
</iter>
<iter>
<var name="${index}">6</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:05:24.661" level="INFO">${TitleElement} = (//a[@class="title"])[6]</msg>
<status status="PASS" starttime="20240415 12:05:24.660" endtime="20240415 12:05:24.661"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:05:24.661" endtime="20240415 12:05:24.730"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:05:24.731" level="INFO">Clicking element '(//a[@class="title"])[6]'.</msg>
<status status="PASS" starttime="20240415 12:05:24.730" endtime="20240415 12:05:48.014"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:05:48.014" endtime="20240415 12:05:48.084"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:05:48.114" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:05:48.085" endtime="20240415 12:05:48.114"/>
</kw>
<msg timestamp="20240415 12:05:48.115" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:05:48.084" endtime="20240415 12:05:48.115"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:05:48.137" level="INFO">${abstractTxt} = Nowadays enterprises implement blockchain technology in various industries, including finance, logistics, and other sectors. While the core idea behind blockchain is to decentralize storage, enterpris...</msg>
<status status="PASS" starttime="20240415 12:05:48.115" endtime="20240415 12:05:48.137"/>
</kw>
<status status="PASS" starttime="20240415 12:05:48.115" endtime="20240415 12:05:48.137"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:05:48.137" endtime="20240415 12:05:48.137"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:05:48.137" endtime="20240415 12:05:48.137"/>
</branch>
<status status="PASS" starttime="20240415 12:05:48.115" endtime="20240415 12:05:48.137"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:05:48.159" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:05:48.137" endtime="20240415 12:05:48.163"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:05:48.163" endtime="20240415 12:05:48.901"/>
</kw>
<status status="PASS" starttime="20240415 12:05:24.660" endtime="20240415 12:05:48.901"/>
</iter>
<iter>
<var name="${index}">7</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:05:48.903" level="INFO">${TitleElement} = (//a[@class="title"])[7]</msg>
<status status="PASS" starttime="20240415 12:05:48.902" endtime="20240415 12:05:48.903"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:05:48.903" endtime="20240415 12:05:48.959"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:05:48.961" level="INFO">Clicking element '(//a[@class="title"])[7]'.</msg>
<status status="PASS" starttime="20240415 12:05:48.960" endtime="20240415 12:06:11.951"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:06:11.951" endtime="20240415 12:06:12.019"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:06:12.045" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:06:12.020" endtime="20240415 12:06:12.045"/>
</kw>
<msg timestamp="20240415 12:06:12.045" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:06:12.019" endtime="20240415 12:06:12.045"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:06:12.067" level="INFO">${abstractTxt} = Large scale distributed databases are designed to support commercial and cloud based applications. The minimal expectation from such systems is that they ensure consistency and reliability in case of ...</msg>
<status status="PASS" starttime="20240415 12:06:12.046" endtime="20240415 12:06:12.067"/>
</kw>
<status status="PASS" starttime="20240415 12:06:12.045" endtime="20240415 12:06:12.067"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:06:12.067" endtime="20240415 12:06:12.068"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:06:12.067" endtime="20240415 12:06:12.068"/>
</branch>
<status status="PASS" starttime="20240415 12:06:12.045" endtime="20240415 12:06:12.068"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:06:12.084" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:06:12.068" endtime="20240415 12:06:12.084"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:06:12.084" endtime="20240415 12:06:13.189"/>
</kw>
<status status="PASS" starttime="20240415 12:05:48.902" endtime="20240415 12:06:13.189"/>
</iter>
<iter>
<var name="${index}">8</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:06:13.190" level="INFO">${TitleElement} = (//a[@class="title"])[8]</msg>
<status status="PASS" starttime="20240415 12:06:13.189" endtime="20240415 12:06:13.190"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:06:13.190" endtime="20240415 12:06:13.284"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:06:13.285" level="INFO">Clicking element '(//a[@class="title"])[8]'.</msg>
<status status="PASS" starttime="20240415 12:06:13.284" endtime="20240415 12:06:36.029"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:06:36.029" endtime="20240415 12:06:36.076"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:06:36.103" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:06:36.077" endtime="20240415 12:06:36.103"/>
</kw>
<msg timestamp="20240415 12:06:36.104" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:06:36.076" endtime="20240415 12:06:36.104"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:06:36.131" level="INFO">${abstractTxt} = The present article proceeds from the mainstream view that the conceptual framework underpinning adversarial systems of criminal adjudication, i.e. a mixture of common-sense philosophy and probabilist...</msg>
<status status="PASS" starttime="20240415 12:06:36.104" endtime="20240415 12:06:36.131"/>
</kw>
<status status="PASS" starttime="20240415 12:06:36.104" endtime="20240415 12:06:36.131"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:06:36.132" endtime="20240415 12:06:36.132"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:06:36.131" endtime="20240415 12:06:36.132"/>
</branch>
<status status="PASS" starttime="20240415 12:06:36.104" endtime="20240415 12:06:36.132"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:06:36.154" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:06:36.132" endtime="20240415 12:06:36.158"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:06:36.158" endtime="20240415 12:06:37.062"/>
</kw>
<status status="PASS" starttime="20240415 12:06:13.189" endtime="20240415 12:06:37.062"/>
</iter>
<iter>
<var name="${index}">9</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:06:37.063" level="INFO">${TitleElement} = (//a[@class="title"])[9]</msg>
<status status="PASS" starttime="20240415 12:06:37.062" endtime="20240415 12:06:37.063"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:06:37.063" endtime="20240415 12:06:37.172"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:06:37.173" level="INFO">Clicking element '(//a[@class="title"])[9]'.</msg>
<status status="PASS" starttime="20240415 12:06:37.172" endtime="20240415 12:06:59.801"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:06:59.801" endtime="20240415 12:06:59.944"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:06:59.970" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:06:59.945" endtime="20240415 12:06:59.970"/>
</kw>
<msg timestamp="20240415 12:06:59.970" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:06:59.945" endtime="20240415 12:06:59.970"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:07:00.000" level="INFO">${abstractTxt} = Reaching agreement among processes sharing read/write memory is possible only in the presence of an eventual unique leader. A leader that fails must be recoverable, but on the other hand, a live and w...</msg>
<status status="PASS" starttime="20240415 12:06:59.970" endtime="20240415 12:07:00.000"/>
</kw>
<status status="PASS" starttime="20240415 12:06:59.970" endtime="20240415 12:07:00.000"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:07:00.000" endtime="20240415 12:07:00.000"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:07:00.000" endtime="20240415 12:07:00.000"/>
</branch>
<status status="PASS" starttime="20240415 12:06:59.970" endtime="20240415 12:07:00.000"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:07:00.025" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:07:00.000" endtime="20240415 12:07:00.036"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:07:00.036" endtime="20240415 12:07:00.976"/>
</kw>
<status status="PASS" starttime="20240415 12:06:37.062" endtime="20240415 12:07:00.976"/>
</iter>
<iter>
<var name="${index}">10</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:07:00.977" level="INFO">${TitleElement} = (//a[@class="title"])[10]</msg>
<status status="PASS" starttime="20240415 12:07:00.977" endtime="20240415 12:07:00.977"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:07:00.977" endtime="20240415 12:07:01.084"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:07:01.085" level="INFO">Clicking element '(//a[@class="title"])[10]'.</msg>
<status status="PASS" starttime="20240415 12:07:01.084" endtime="20240415 12:07:23.603"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:07:23.603" endtime="20240415 12:07:23.637"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:07:23.689" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:07:23.652" endtime="20240415 12:07:23.689"/>
</kw>
<msg timestamp="20240415 12:07:23.689" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:07:23.637" endtime="20240415 12:07:23.689"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:07:23.715" level="INFO">${abstractTxt} = GUI design isn't simply a matter of putting a nice front-end on a capable program. It requires thought about the way in which people might be expected to use a system, and investigation of the ways th...</msg>
<status status="PASS" starttime="20240415 12:07:23.690" endtime="20240415 12:07:23.715"/>
</kw>
<status status="PASS" starttime="20240415 12:07:23.690" endtime="20240415 12:07:23.715"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:07:23.716" endtime="20240415 12:07:23.716"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:07:23.716" endtime="20240415 12:07:23.716"/>
</branch>
<status status="PASS" starttime="20240415 12:07:23.689" endtime="20240415 12:07:23.716"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:07:23.737" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:07:23.716" endtime="20240415 12:07:23.742"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:07:23.742" endtime="20240415 12:07:25.471"/>
</kw>
<status status="PASS" starttime="20240415 12:07:00.977" endtime="20240415 12:07:25.471"/>
</iter>
<iter>
<var name="${index}">11</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:07:25.472" level="INFO">${TitleElement} = (//a[@class="title"])[11]</msg>
<status status="PASS" starttime="20240415 12:07:25.471" endtime="20240415 12:07:25.472"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:07:25.472" endtime="20240415 12:07:25.504"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:07:25.505" level="INFO">Clicking element '(//a[@class="title"])[11]'.</msg>
<status status="PASS" starttime="20240415 12:07:25.504" endtime="20240415 12:07:49.915"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:07:49.915" endtime="20240415 12:07:49.961"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:07:50.003" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:07:49.961" endtime="20240415 12:07:50.003"/>
</kw>
<msg timestamp="20240415 12:07:50.003" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:07:49.961" endtime="20240415 12:07:50.003"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:07:50.093" level="INFO">${abstractTxt} = We consider the scheduling of a sporadic real-time task system on an identical multiprocessor. Though Pfair algorithms are theoretically optimal for such task systems, in practice, their runtime overh...</msg>
<status status="PASS" starttime="20240415 12:07:50.003" endtime="20240415 12:07:50.094"/>
</kw>
<status status="PASS" starttime="20240415 12:07:50.003" endtime="20240415 12:07:50.094"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:07:50.094" endtime="20240415 12:07:50.094"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:07:50.094" endtime="20240415 12:07:50.094"/>
</branch>
<status status="PASS" starttime="20240415 12:07:50.003" endtime="20240415 12:07:50.094"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:07:50.121" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:07:50.094" endtime="20240415 12:07:50.125"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:07:50.125" endtime="20240415 12:07:51.097"/>
</kw>
<status status="PASS" starttime="20240415 12:07:25.471" endtime="20240415 12:07:51.097"/>
</iter>
<iter>
<var name="${index}">12</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:07:51.098" level="INFO">${TitleElement} = (//a[@class="title"])[12]</msg>
<status status="PASS" starttime="20240415 12:07:51.098" endtime="20240415 12:07:51.098"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:07:51.099" endtime="20240415 12:07:51.228"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:07:51.229" level="INFO">Clicking element '(//a[@class="title"])[12]'.</msg>
<status status="PASS" starttime="20240415 12:07:51.228" endtime="20240415 12:08:14.290"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:08:14.290" endtime="20240415 12:08:14.355"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:08:14.384" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:08:14.356" endtime="20240415 12:08:14.384"/>
</kw>
<msg timestamp="20240415 12:08:14.384" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:08:14.355" endtime="20240415 12:08:14.384"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:08:14.408" level="INFO">${abstractTxt} = The mathematical proof checker Mizar by Andrzej Trybulec uses a proof input language that is much more readable than the input languages of most other proof assistants. This system also differs in man...</msg>
<status status="PASS" starttime="20240415 12:08:14.384" endtime="20240415 12:08:14.408"/>
</kw>
<status status="PASS" starttime="20240415 12:08:14.384" endtime="20240415 12:08:14.408"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:08:14.408" endtime="20240415 12:08:14.409"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:08:14.408" endtime="20240415 12:08:14.409"/>
</branch>
<status status="PASS" starttime="20240415 12:08:14.384" endtime="20240415 12:08:14.409"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:08:14.426" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:08:14.409" endtime="20240415 12:08:14.434"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:08:14.434" endtime="20240415 12:08:15.391"/>
</kw>
<status status="PASS" starttime="20240415 12:07:51.097" endtime="20240415 12:08:15.391"/>
</iter>
<iter>
<var name="${index}">13</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:08:15.392" level="INFO">${TitleElement} = (//a[@class="title"])[13]</msg>
<status status="PASS" starttime="20240415 12:08:15.392" endtime="20240415 12:08:15.392"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:08:15.392" endtime="20240415 12:08:15.530"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:08:15.530" level="INFO">Clicking element '(//a[@class="title"])[13]'.</msg>
<status status="PASS" starttime="20240415 12:08:15.530" endtime="20240415 12:08:38.221"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:08:38.221" endtime="20240415 12:08:38.259"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:08:38.289" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:08:38.259" endtime="20240415 12:08:38.289"/>
</kw>
<msg timestamp="20240415 12:08:38.289" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:08:38.259" endtime="20240415 12:08:38.289"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:08:38.315" level="INFO">${abstractTxt} = A number of data-driven execution models have been proposed for parallel execution of logic programs8, 12, 9, 3) LogDf is an abstract data-driven execution model for pure logic programs3) which has sh...</msg>
<status status="PASS" starttime="20240415 12:08:38.289" endtime="20240415 12:08:38.315"/>
</kw>
<status status="PASS" starttime="20240415 12:08:38.289" endtime="20240415 12:08:38.315"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:08:38.315" endtime="20240415 12:08:38.315"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:08:38.315" endtime="20240415 12:08:38.315"/>
</branch>
<status status="PASS" starttime="20240415 12:08:38.289" endtime="20240415 12:08:38.315"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:08:38.330" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:08:38.315" endtime="20240415 12:08:38.347"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:08:38.347" endtime="20240415 12:08:54.023"/>
</kw>
<status status="PASS" starttime="20240415 12:08:15.391" endtime="20240415 12:08:54.024"/>
</iter>
<iter>
<var name="${index}">14</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:08:54.024" level="INFO">${TitleElement} = (//a[@class="title"])[14]</msg>
<status status="PASS" starttime="20240415 12:08:54.024" endtime="20240415 12:08:54.024"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:08:54.024" endtime="20240415 12:08:54.059"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:08:54.060" level="INFO">Clicking element '(//a[@class="title"])[14]'.</msg>
<status status="PASS" starttime="20240415 12:08:54.059" endtime="20240415 12:09:17.026"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:09:17.026" endtime="20240415 12:09:17.082"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:09:17.115" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:09:17.083" endtime="20240415 12:09:17.115"/>
</kw>
<msg timestamp="20240415 12:09:17.115" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:09:17.082" endtime="20240415 12:09:17.115"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:09:17.148" level="INFO">${abstractTxt} = The problem of representing a setU≜{u 1,...,u m} of read-write variables on ann-node distributed-memory parallel computer is considered. It is shown thatU can be represented among then nodes of a vari...</msg>
<status status="PASS" starttime="20240415 12:09:17.116" endtime="20240415 12:09:17.148"/>
</kw>
<status status="PASS" starttime="20240415 12:09:17.115" endtime="20240415 12:09:17.148"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:09:17.148" endtime="20240415 12:09:17.148"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:09:17.148" endtime="20240415 12:09:17.148"/>
</branch>
<status status="PASS" starttime="20240415 12:09:17.115" endtime="20240415 12:09:17.149"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:09:17.162" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:09:17.149" endtime="20240415 12:09:17.162"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:09:17.162" endtime="20240415 12:09:18.042"/>
</kw>
<status status="PASS" starttime="20240415 12:08:54.024" endtime="20240415 12:09:18.042"/>
</iter>
<iter>
<var name="${index}">15</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:09:18.043" level="INFO">${TitleElement} = (//a[@class="title"])[15]</msg>
<status status="PASS" starttime="20240415 12:09:18.043" endtime="20240415 12:09:18.043"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:09:18.043" endtime="20240415 12:09:18.095"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:09:18.096" level="INFO">Clicking element '(//a[@class="title"])[15]'.</msg>
<status status="PASS" starttime="20240415 12:09:18.096" endtime="20240415 12:09:41.680"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:09:41.680" endtime="20240415 12:09:41.712"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:09:41.746" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:09:41.713" endtime="20240415 12:09:41.746"/>
</kw>
<msg timestamp="20240415 12:09:41.747" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:09:41.713" endtime="20240415 12:09:41.747"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:09:41.773" level="INFO">${abstractTxt} = This paper presents a distributed, energy-aware method for the autonomous deployment and maintenance of battery-powered robots within a known or unknown region in 2D space. Our approach does not rely ...</msg>
<status status="PASS" starttime="20240415 12:09:41.747" endtime="20240415 12:09:41.773"/>
</kw>
<status status="PASS" starttime="20240415 12:09:41.747" endtime="20240415 12:09:41.773"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:09:41.774" endtime="20240415 12:09:41.774"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:09:41.773" endtime="20240415 12:09:41.774"/>
</branch>
<status status="PASS" starttime="20240415 12:09:41.747" endtime="20240415 12:09:41.774"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:09:41.796" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:09:41.774" endtime="20240415 12:09:41.797"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:09:41.797" endtime="20240415 12:09:42.793"/>
</kw>
<status status="PASS" starttime="20240415 12:09:18.042" endtime="20240415 12:09:42.793"/>
</iter>
<iter>
<var name="${index}">16</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:09:42.794" level="INFO">${TitleElement} = (//a[@class="title"])[16]</msg>
<status status="PASS" starttime="20240415 12:09:42.793" endtime="20240415 12:09:42.794"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:09:42.794" endtime="20240415 12:09:42.854"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:09:42.855" level="INFO">Clicking element '(//a[@class="title"])[16]'.</msg>
<status status="PASS" starttime="20240415 12:09:42.854" endtime="20240415 12:10:05.624"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:10:05.624" endtime="20240415 12:10:05.689"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:10:05.718" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:10:05.690" endtime="20240415 12:10:05.718"/>
</kw>
<msg timestamp="20240415 12:10:05.718" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:10:05.689" endtime="20240415 12:10:05.718"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:10:05.744" level="INFO">${abstractTxt} = Traversal is a fundamental procedure in most parallel graph algorithms. To explore the massive fine-grained parallelism in graph traversal, the fine-grained data synchronization is critical. On commod...</msg>
<status status="PASS" starttime="20240415 12:10:05.718" endtime="20240415 12:10:05.744"/>
</kw>
<status status="PASS" starttime="20240415 12:10:05.718" endtime="20240415 12:10:05.744"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:10:05.745" endtime="20240415 12:10:05.745"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:10:05.744" endtime="20240415 12:10:05.745"/>
</branch>
<status status="PASS" starttime="20240415 12:10:05.718" endtime="20240415 12:10:05.745"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:10:05.766" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:10:05.745" endtime="20240415 12:10:05.771"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:10:05.771" endtime="20240415 12:10:06.750"/>
</kw>
<status status="PASS" starttime="20240415 12:09:42.793" endtime="20240415 12:10:06.750"/>
</iter>
<iter>
<var name="${index}">17</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:10:06.751" level="INFO">${TitleElement} = (//a[@class="title"])[17]</msg>
<status status="PASS" starttime="20240415 12:10:06.750" endtime="20240415 12:10:06.751"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:10:06.751" endtime="20240415 12:10:06.885"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:10:06.886" level="INFO">Clicking element '(//a[@class="title"])[17]'.</msg>
<status status="PASS" starttime="20240415 12:10:06.885" endtime="20240415 12:10:29.925"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:10:29.925" endtime="20240415 12:10:29.961"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:10:30.010" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:10:29.961" endtime="20240415 12:10:30.011"/>
</kw>
<msg timestamp="20240415 12:10:30.011" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:10:29.961" endtime="20240415 12:10:30.011"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:10:30.048" level="INFO">${abstractTxt} = We introduce the recovery-oriented programming paradigm. Programs that are designed according to the recovery-oriented programming paradigm include, as an integral part, the important safety and liven...</msg>
<status status="PASS" starttime="20240415 12:10:30.011" endtime="20240415 12:10:30.048"/>
</kw>
<status status="PASS" starttime="20240415 12:10:30.011" endtime="20240415 12:10:30.048"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:10:30.048" endtime="20240415 12:10:30.048"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:10:30.048" endtime="20240415 12:10:30.048"/>
</branch>
<status status="PASS" starttime="20240415 12:10:30.011" endtime="20240415 12:10:30.048"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:10:30.078" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:10:30.048" endtime="20240415 12:10:30.081"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:10:30.081" endtime="20240415 12:10:31.213"/>
</kw>
<status status="PASS" starttime="20240415 12:10:06.750" endtime="20240415 12:10:31.213"/>
</iter>
<iter>
<var name="${index}">18</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:10:31.214" level="INFO">${TitleElement} = (//a[@class="title"])[18]</msg>
<status status="PASS" starttime="20240415 12:10:31.214" endtime="20240415 12:10:31.214"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:10:31.215" endtime="20240415 12:10:31.318"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:10:31.319" level="INFO">Clicking element '(//a[@class="title"])[18]'.</msg>
<status status="PASS" starttime="20240415 12:10:31.318" endtime="20240415 12:10:54.550"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:10:54.550" endtime="20240415 12:10:54.589"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:10:54.625" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:10:54.590" endtime="20240415 12:10:54.625"/>
</kw>
<msg timestamp="20240415 12:10:54.625" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:10:54.590" endtime="20240415 12:10:54.625"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:10:54.652" level="INFO">${abstractTxt} = A growing set of applications require access to digital video and audio. In order to provide playback of such continuous media (CM), scheduling strategies for CM data servers (CMS) are necessary. In s...</msg>
<status status="PASS" starttime="20240415 12:10:54.625" endtime="20240415 12:10:54.652"/>
</kw>
<status status="PASS" starttime="20240415 12:10:54.625" endtime="20240415 12:10:54.652"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:10:54.653" endtime="20240415 12:10:54.653"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:10:54.653" endtime="20240415 12:10:54.653"/>
</branch>
<status status="PASS" starttime="20240415 12:10:54.625" endtime="20240415 12:10:54.653"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:10:54.678" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:10:54.653" endtime="20240415 12:10:54.681"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:10:54.682" endtime="20240415 12:10:55.658"/>
</kw>
<status status="PASS" starttime="20240415 12:10:31.214" endtime="20240415 12:10:55.658"/>
</iter>
<iter>
<var name="${index}">19</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:10:55.659" level="INFO">${TitleElement} = (//a[@class="title"])[19]</msg>
<status status="PASS" starttime="20240415 12:10:55.658" endtime="20240415 12:10:55.659"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:10:55.659" endtime="20240415 12:10:55.769"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:10:55.770" level="INFO">Clicking element '(//a[@class="title"])[19]'.</msg>
<status status="PASS" starttime="20240415 12:10:55.769" endtime="20240415 12:11:19.760"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:11:19.760" endtime="20240415 12:11:19.796"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:11:19.830" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:11:19.796" endtime="20240415 12:11:19.830"/>
</kw>
<msg timestamp="20240415 12:11:19.830" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:11:19.796" endtime="20240415 12:11:19.830"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:11:19.856" level="INFO">${abstractTxt} = Model checkers frequently fail to completely verify a concurrent program, even if partial-order reduction is applied. The verification engineer is left in doubt whether the program is safe and the eff...</msg>
<status status="PASS" starttime="20240415 12:11:19.831" endtime="20240415 12:11:19.856"/>
</kw>
<status status="PASS" starttime="20240415 12:11:19.831" endtime="20240415 12:11:19.856"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:11:19.856" endtime="20240415 12:11:19.856"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:11:19.856" endtime="20240415 12:11:19.856"/>
</branch>
<status status="PASS" starttime="20240415 12:11:19.831" endtime="20240415 12:11:19.856"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:11:19.879" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:11:19.856" endtime="20240415 12:11:19.886"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:11:19.886" endtime="20240415 12:11:20.916"/>
</kw>
<status status="PASS" starttime="20240415 12:10:55.658" endtime="20240415 12:11:20.916"/>
</iter>
<status status="PASS" starttime="20240415 12:02:50.338" endtime="20240415 12:11:20.916"/>
</for>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${nextBTN}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:11:20.917" level="INFO">Clicking element '//*[@id="kb-nav--main"]/div[4]/form/a/img'.</msg>
<status status="PASS" starttime="20240415 12:11:20.916" endtime="20240415 12:11:22.736"/>
</kw>
<status status="PASS" starttime="20240415 12:02:50.319" endtime="20240415 12:11:22.736"/>
</iter>
<iter>
<var name="${page}">1</var>
<kw name="Get Element Count" library="SeleniumLibrary">
<var>${NumOfTitleInPage}</var>
<arg>${title}</arg>
<doc>Returns the number of elements matching ``locator``.</doc>
<msg timestamp="20240415 12:11:22.849" level="INFO">${NumOfTitleInPage} = 20</msg>
<status status="PASS" starttime="20240415 12:11:22.736" endtime="20240415 12:11:22.849"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>1</value>
<value>${NumOfTitleInPage}</value>
<iter>
<var name="${index}">1</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:11:22.850" level="INFO">${TitleElement} = (//a[@class="title"])[1]</msg>
<status status="PASS" starttime="20240415 12:11:22.849" endtime="20240415 12:11:22.850"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:11:22.850" endtime="20240415 12:11:22.886"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:11:22.887" level="INFO">Clicking element '(//a[@class="title"])[1]'.</msg>
<status status="PASS" starttime="20240415 12:11:22.886" endtime="20240415 12:11:45.657"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:11:45.657" endtime="20240415 12:11:45.702"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:11:45.733" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:11:45.703" endtime="20240415 12:11:45.733"/>
</kw>
<msg timestamp="20240415 12:11:45.733" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:11:45.703" endtime="20240415 12:11:45.733"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:11:45.757" level="INFO">${abstractTxt} = We present an experience report on automating the verification of the software barrier synchronization primitive. The informal specification of the primitive is: when a thread calls the software barri...</msg>
<status status="PASS" starttime="20240415 12:11:45.733" endtime="20240415 12:11:45.757"/>
</kw>
<status status="PASS" starttime="20240415 12:11:45.733" endtime="20240415 12:11:45.757"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:11:45.757" endtime="20240415 12:11:45.757"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:11:45.757" endtime="20240415 12:11:45.757"/>
</branch>
<status status="PASS" starttime="20240415 12:11:45.733" endtime="20240415 12:11:45.757"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:11:45.779" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:11:45.758" endtime="20240415 12:11:45.783"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:11:45.783" endtime="20240415 12:11:46.624"/>
</kw>
<status status="PASS" starttime="20240415 12:11:22.849" endtime="20240415 12:11:46.624"/>
</iter>
<iter>
<var name="${index}">2</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:11:46.626" level="INFO">${TitleElement} = (//a[@class="title"])[2]</msg>
<status status="PASS" starttime="20240415 12:11:46.625" endtime="20240415 12:11:46.626"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:11:46.626" endtime="20240415 12:11:46.742"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:11:46.743" level="INFO">Clicking element '(//a[@class="title"])[2]'.</msg>
<status status="PASS" starttime="20240415 12:11:46.742" endtime="20240415 12:12:09.330"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:12:09.331" endtime="20240415 12:12:09.377"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:12:09.408" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:12:09.378" endtime="20240415 12:12:09.408"/>
</kw>
<msg timestamp="20240415 12:12:09.408" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:12:09.378" endtime="20240415 12:12:09.408"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:12:09.435" level="INFO">${abstractTxt} = Research on P2P data structures has tacitly assumed that peers readily participate in the work, i.e., are cooperative. But such participation is voluntary, and free riding is the dominant strategy. Th...</msg>
<status status="PASS" starttime="20240415 12:12:09.408" endtime="20240415 12:12:09.436"/>
</kw>
<status status="PASS" starttime="20240415 12:12:09.408" endtime="20240415 12:12:09.436"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:12:09.436" endtime="20240415 12:12:09.436"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:12:09.436" endtime="20240415 12:12:09.436"/>
</branch>
<status status="PASS" starttime="20240415 12:12:09.408" endtime="20240415 12:12:09.436"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:12:09.455" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:12:09.437" endtime="20240415 12:12:09.455"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:12:09.455" endtime="20240415 12:12:10.333"/>
</kw>
<status status="PASS" starttime="20240415 12:11:46.625" endtime="20240415 12:12:10.333"/>
</iter>
<iter>
<var name="${index}">3</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:12:10.334" level="INFO">${TitleElement} = (//a[@class="title"])[3]</msg>
<status status="PASS" starttime="20240415 12:12:10.334" endtime="20240415 12:12:10.334"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:12:10.334" endtime="20240415 12:12:10.393"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:12:10.394" level="INFO">Clicking element '(//a[@class="title"])[3]'.</msg>
<status status="PASS" starttime="20240415 12:12:10.393" endtime="20240415 12:12:32.897"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:12:32.898" endtime="20240415 12:12:32.951"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:12:32.986" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:12:32.952" endtime="20240415 12:12:32.986"/>
</kw>
<msg timestamp="20240415 12:12:32.986" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:12:32.952" endtime="20240415 12:12:32.986"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:12:33.011" level="INFO">${abstractTxt} = In many real-time applications, the set of tasks in the system, as well as the characteristics of the tasks, change during system execution. Specifically, the system moves from one mode of execution t...</msg>
<status status="PASS" starttime="20240415 12:12:32.987" endtime="20240415 12:12:33.011"/>
</kw>
<status status="PASS" starttime="20240415 12:12:32.986" endtime="20240415 12:12:33.011"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:12:33.011" endtime="20240415 12:12:33.011"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:12:33.011" endtime="20240415 12:12:33.011"/>
</branch>
<status status="PASS" starttime="20240415 12:12:32.986" endtime="20240415 12:12:33.011"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:12:33.033" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:12:33.012" endtime="20240415 12:12:33.037"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:12:33.037" endtime="20240415 12:12:33.356"/>
</kw>
<status status="PASS" starttime="20240415 12:12:10.334" endtime="20240415 12:12:33.357"/>
</iter>
<iter>
<var name="${index}">4</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:12:33.357" level="INFO">${TitleElement} = (//a[@class="title"])[4]</msg>
<status status="PASS" starttime="20240415 12:12:33.357" endtime="20240415 12:12:33.357"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:12:33.358" endtime="20240415 12:12:33.463"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:12:33.464" level="INFO">Clicking element '(//a[@class="title"])[4]'.</msg>
<status status="PASS" starttime="20240415 12:12:33.463" endtime="20240415 12:12:56.885"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:12:56.886" endtime="20240415 12:12:56.933"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:12:56.969" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:12:56.934" endtime="20240415 12:12:56.969"/>
</kw>
<msg timestamp="20240415 12:12:56.969" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:12:56.933" endtime="20240415 12:12:56.969"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:12:56.995" level="INFO">${abstractTxt} = The issues surrounding the question of atomicity, both in the past and nowadays, are briefly reviewed, and a picture of an ACID (atomic, consistent, isolated, durable) transaction as a refinement prob...</msg>
<status status="PASS" starttime="20240415 12:12:56.970" endtime="20240415 12:12:56.995"/>
</kw>
<status status="PASS" starttime="20240415 12:12:56.969" endtime="20240415 12:12:56.995"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:12:56.995" endtime="20240415 12:12:56.995"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:12:56.995" endtime="20240415 12:12:56.995"/>
</branch>
<status status="PASS" starttime="20240415 12:12:56.969" endtime="20240415 12:12:56.995"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:12:57.040" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:12:56.996" endtime="20240415 12:12:57.049"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:12:57.049" endtime="20240415 12:13:12.641"/>
</kw>
<status status="PASS" starttime="20240415 12:12:33.357" endtime="20240415 12:13:12.642"/>
</iter>
<iter>
<var name="${index}">5</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:13:12.642" level="INFO">${TitleElement} = (//a[@class="title"])[5]</msg>
<status status="PASS" starttime="20240415 12:13:12.642" endtime="20240415 12:13:12.642"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:13:12.643" endtime="20240415 12:13:12.678"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:13:12.680" level="INFO">Clicking element '(//a[@class="title"])[5]'.</msg>
<status status="PASS" starttime="20240415 12:13:12.679" endtime="20240415 12:13:35.421"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:13:35.421" endtime="20240415 12:13:35.449"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:13:35.472" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:13:35.450" endtime="20240415 12:13:35.472"/>
</kw>
<msg timestamp="20240415 12:13:35.472" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:13:35.450" endtime="20240415 12:13:35.472"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:13:35.492" level="INFO">${abstractTxt} = This paper describes a security architecture for mobile agent based systems. It defines the notion of a security-enhanced agent and outlines security management components in agent platform bases and ...</msg>
<status status="PASS" starttime="20240415 12:13:35.472" endtime="20240415 12:13:35.493"/>
</kw>
<status status="PASS" starttime="20240415 12:13:35.472" endtime="20240415 12:13:35.493"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:13:35.493" endtime="20240415 12:13:35.493"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:13:35.493" endtime="20240415 12:13:35.493"/>
</branch>
<status status="PASS" starttime="20240415 12:13:35.472" endtime="20240415 12:13:35.493"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:13:35.510" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:13:35.494" endtime="20240415 12:13:35.510"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:13:35.510" endtime="20240415 12:13:36.360"/>
</kw>
<status status="PASS" starttime="20240415 12:13:12.642" endtime="20240415 12:13:36.360"/>
</iter>
<iter>
<var name="${index}">6</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:13:36.362" level="INFO">${TitleElement} = (//a[@class="title"])[6]</msg>
<status status="PASS" starttime="20240415 12:13:36.361" endtime="20240415 12:13:36.362"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:13:36.362" endtime="20240415 12:13:36.434"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:13:36.435" level="INFO">Clicking element '(//a[@class="title"])[6]'.</msg>
<status status="PASS" starttime="20240415 12:13:36.434" endtime="20240415 12:13:59.299"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:13:59.299" endtime="20240415 12:13:59.359"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:13:59.390" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:13:59.359" endtime="20240415 12:13:59.390"/>
</kw>
<msg timestamp="20240415 12:13:59.390" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:13:59.359" endtime="20240415 12:13:59.390"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:13:59.414" level="INFO">${abstractTxt} = This paper discusses the considerations that have played a role in the design of the language POOL2. This language integrates the structuring techniques of object-oriented programming with mechanisms ...</msg>
<status status="PASS" starttime="20240415 12:13:59.390" endtime="20240415 12:13:59.415"/>
</kw>
<status status="PASS" starttime="20240415 12:13:59.390" endtime="20240415 12:13:59.415"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:13:59.415" endtime="20240415 12:13:59.415"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:13:59.415" endtime="20240415 12:13:59.415"/>
</branch>
<status status="PASS" starttime="20240415 12:13:59.390" endtime="20240415 12:13:59.415"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:13:59.436" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:13:59.415" endtime="20240415 12:13:59.440"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:13:59.440" endtime="20240415 12:14:00.287"/>
</kw>
<status status="PASS" starttime="20240415 12:13:36.361" endtime="20240415 12:14:00.287"/>
</iter>
<iter>
<var name="${index}">7</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:14:00.288" level="INFO">${TitleElement} = (//a[@class="title"])[7]</msg>
<status status="PASS" starttime="20240415 12:14:00.288" endtime="20240415 12:14:00.288"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:14:00.288" endtime="20240415 12:14:00.344"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:14:00.346" level="INFO">Clicking element '(//a[@class="title"])[7]'.</msg>
<status status="PASS" starttime="20240415 12:14:00.345" endtime="20240415 12:14:23.566"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:14:23.567" endtime="20240415 12:14:23.627"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:14:23.659" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:14:23.628" endtime="20240415 12:14:23.659"/>
</kw>
<msg timestamp="20240415 12:14:23.659" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:14:23.627" endtime="20240415 12:14:23.659"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:14:23.684" level="INFO">${abstractTxt} = Complex variable-structure systems (CVSSs) are a common type of complex systems that exhibit changes both at structural and behavior levels. Simulations of CVSSs challenge current collaborative execut...</msg>
<status status="PASS" starttime="20240415 12:14:23.659" endtime="20240415 12:14:23.684"/>
</kw>
<status status="PASS" starttime="20240415 12:14:23.659" endtime="20240415 12:14:23.684"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:14:23.684" endtime="20240415 12:14:23.684"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:14:23.684" endtime="20240415 12:14:23.684"/>
</branch>
<status status="PASS" starttime="20240415 12:14:23.659" endtime="20240415 12:14:23.684"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:14:23.704" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:14:23.684" endtime="20240415 12:14:23.708"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:14:23.709" endtime="20240415 12:14:24.446"/>
</kw>
<status status="PASS" starttime="20240415 12:14:00.287" endtime="20240415 12:14:24.446"/>
</iter>
<iter>
<var name="${index}">8</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:14:24.447" level="INFO">${TitleElement} = (//a[@class="title"])[8]</msg>
<status status="PASS" starttime="20240415 12:14:24.446" endtime="20240415 12:14:24.447"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:14:24.447" endtime="20240415 12:14:24.511"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:14:24.513" level="INFO">Clicking element '(//a[@class="title"])[8]'.</msg>
<status status="PASS" starttime="20240415 12:14:24.511" endtime="20240415 12:14:47.643"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:14:47.644" endtime="20240415 12:14:47.702"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:14:47.731" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:14:47.703" endtime="20240415 12:14:47.732"/>
</kw>
<msg timestamp="20240415 12:14:47.732" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:14:47.702" endtime="20240415 12:14:47.732"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:14:47.756" level="INFO">${abstractTxt} = Data centers are major contributors to the emission of carbon dioxide to the atmosphere, and this contribution is expected to increase in the following years. This has encouraged the development of te...</msg>
<status status="PASS" starttime="20240415 12:14:47.732" endtime="20240415 12:14:47.756"/>
</kw>
<status status="PASS" starttime="20240415 12:14:47.732" endtime="20240415 12:14:47.756"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:14:47.756" endtime="20240415 12:14:47.756"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:14:47.756" endtime="20240415 12:14:47.757"/>
</branch>
<status status="PASS" starttime="20240415 12:14:47.732" endtime="20240415 12:14:47.757"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:14:47.779" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:14:47.757" endtime="20240415 12:14:47.781"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:14:47.781" endtime="20240415 12:15:03.371"/>
</kw>
<status status="PASS" starttime="20240415 12:14:24.446" endtime="20240415 12:15:03.371"/>
</iter>
<iter>
<var name="${index}">9</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:15:03.372" level="INFO">${TitleElement} = (//a[@class="title"])[9]</msg>
<status status="PASS" starttime="20240415 12:15:03.372" endtime="20240415 12:15:03.373"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:15:03.373" endtime="20240415 12:15:03.413"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:15:03.414" level="INFO">Clicking element '(//a[@class="title"])[9]'.</msg>
<status status="PASS" starttime="20240415 12:15:03.413" endtime="20240415 12:15:35.028"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:15:35.028" endtime="20240415 12:15:35.075"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:15:35.129" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:15:35.075" endtime="20240415 12:15:35.129"/>
</kw>
<msg timestamp="20240415 12:15:35.129" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:15:35.075" endtime="20240415 12:15:35.130"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:15:35.176" level="INFO">${abstractTxt} = The past 10 years has seen an explosion of interest for the area of science and technology labelled “nanotechnology.” Although at an early stage, nanotechnology is providing a space for the creation o...</msg>
<status status="PASS" starttime="20240415 12:15:35.130" endtime="20240415 12:15:35.176"/>
</kw>
<status status="PASS" starttime="20240415 12:15:35.130" endtime="20240415 12:15:35.176"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:15:35.176" endtime="20240415 12:15:35.176"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:15:35.176" endtime="20240415 12:15:35.176"/>
</branch>
<status status="PASS" starttime="20240415 12:15:35.130" endtime="20240415 12:15:35.176"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:15:35.203" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:15:35.177" endtime="20240415 12:15:35.208"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:15:35.208" endtime="20240415 12:15:36.191"/>
</kw>
<status status="PASS" starttime="20240415 12:15:03.372" endtime="20240415 12:15:36.191"/>
</iter>
<iter>
<var name="${index}">10</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:15:36.193" level="INFO">${TitleElement} = (//a[@class="title"])[10]</msg>
<status status="PASS" starttime="20240415 12:15:36.192" endtime="20240415 12:15:36.193"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:15:36.193" endtime="20240415 12:15:36.334"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:15:36.336" level="INFO">Clicking element '(//a[@class="title"])[10]'.</msg>
<status status="PASS" starttime="20240415 12:15:36.335" endtime="20240415 12:16:07.551"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:16:07.552" endtime="20240415 12:16:07.596"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:16:07.622" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:16:07.596" endtime="20240415 12:16:07.622"/>
</kw>
<msg timestamp="20240415 12:16:07.622" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:16:07.596" endtime="20240415 12:16:07.622"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:16:07.645" level="INFO">${abstractTxt} = The Quantified Constraint Satisfaction Problem (QCSP) extends classical CSP in a way which allows reasoning about uncertainty. In this paper I present novel algorithms for solving QCSP. Firstly I pres...</msg>
<status status="PASS" starttime="20240415 12:16:07.623" endtime="20240415 12:16:07.645"/>
</kw>
<status status="PASS" starttime="20240415 12:16:07.623" endtime="20240415 12:16:07.645"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:16:07.645" endtime="20240415 12:16:07.645"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:16:07.645" endtime="20240415 12:16:07.645"/>
</branch>
<status status="PASS" starttime="20240415 12:16:07.622" endtime="20240415 12:16:07.645"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:16:07.661" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:16:07.645" endtime="20240415 12:16:07.672"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:16:07.672" endtime="20240415 12:16:08.659"/>
</kw>
<status status="PASS" starttime="20240415 12:15:36.192" endtime="20240415 12:16:08.659"/>
</iter>
<iter>
<var name="${index}">11</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:16:08.660" level="INFO">${TitleElement} = (//a[@class="title"])[11]</msg>
<status status="PASS" starttime="20240415 12:16:08.659" endtime="20240415 12:16:08.660"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:16:08.660" endtime="20240415 12:16:08.795"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:16:08.796" level="INFO">Clicking element '(//a[@class="title"])[11]'.</msg>
<status status="PASS" starttime="20240415 12:16:08.795" endtime="20240415 12:16:29.449"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:16:29.450" endtime="20240415 12:16:29.508"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:16:29.536" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:16:29.509" endtime="20240415 12:16:29.536"/>
</kw>
<msg timestamp="20240415 12:16:29.536" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:16:29.508" endtime="20240415 12:16:29.536"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:16:29.559" level="INFO">${abstractTxt} = An elementary correctness proof for Ben-Ari's algorithm (1984) for incremental garbage collection is given. We give a new algorithm for systems in which there are multiple mutators and a proof of its ...</msg>
<status status="PASS" starttime="20240415 12:16:29.536" endtime="20240415 12:16:29.559"/>
</kw>
<status status="PASS" starttime="20240415 12:16:29.536" endtime="20240415 12:16:29.560"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:16:29.560" endtime="20240415 12:16:29.560"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:16:29.560" endtime="20240415 12:16:29.560"/>
</branch>
<status status="PASS" starttime="20240415 12:16:29.536" endtime="20240415 12:16:29.560"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:16:29.581" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:16:29.560" endtime="20240415 12:16:29.588"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:16:29.589" endtime="20240415 12:16:30.450"/>
</kw>
<status status="PASS" starttime="20240415 12:16:08.659" endtime="20240415 12:16:30.450"/>
</iter>
<iter>
<var name="${index}">12</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:16:30.451" level="INFO">${TitleElement} = (//a[@class="title"])[12]</msg>
<status status="PASS" starttime="20240415 12:16:30.450" endtime="20240415 12:16:30.451"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:16:30.451" endtime="20240415 12:16:30.572"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:16:30.573" level="INFO">Clicking element '(//a[@class="title"])[12]'.</msg>
<status status="PASS" starttime="20240415 12:16:30.572" endtime="20240415 12:17:02.649"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:17:02.649" endtime="20240415 12:17:02.686"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:17:02.715" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:17:02.687" endtime="20240415 12:17:02.715"/>
</kw>
<msg timestamp="20240415 12:17:02.715" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:17:02.686" endtime="20240415 12:17:02.715"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:17:02.743" level="INFO">${abstractTxt} = We present the design and implementation of a parallel algorithm for computing Gröbner bases on distributed memory multiprocessors. The parallel algorithm is irregular both in space and time: the data...</msg>
<status status="PASS" starttime="20240415 12:17:02.715" endtime="20240415 12:17:02.743"/>
</kw>
<status status="PASS" starttime="20240415 12:17:02.715" endtime="20240415 12:17:02.743"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:17:02.743" endtime="20240415 12:17:02.743"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:17:02.743" endtime="20240415 12:17:02.743"/>
</branch>
<status status="PASS" starttime="20240415 12:17:02.715" endtime="20240415 12:17:02.743"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:17:02.757" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:17:02.743" endtime="20240415 12:17:02.769"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:17:02.769" endtime="20240415 12:17:03.788"/>
</kw>
<status status="PASS" starttime="20240415 12:16:30.450" endtime="20240415 12:17:03.788"/>
</iter>
<iter>
<var name="${index}">13</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:17:03.790" level="INFO">${TitleElement} = (//a[@class="title"])[13]</msg>
<status status="PASS" starttime="20240415 12:17:03.789" endtime="20240415 12:17:03.790"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:17:03.790" endtime="20240415 12:17:03.918"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:17:03.919" level="INFO">Clicking element '(//a[@class="title"])[13]'.</msg>
<status status="PASS" starttime="20240415 12:17:03.918" endtime="20240415 12:17:25.357"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:17:25.357" endtime="20240415 12:17:25.399"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:17:25.425" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:17:25.400" endtime="20240415 12:17:25.426"/>
</kw>
<msg timestamp="20240415 12:17:25.426" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:17:25.399" endtime="20240415 12:17:25.426"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:17:25.455" level="INFO">${abstractTxt} = We study the behavior of Range Voting and Normalized Range Voting with respect to electoral control. Electoral control encompasses attempts from an election chair to alter the participation or structu...</msg>
<status status="PASS" starttime="20240415 12:17:25.427" endtime="20240415 12:17:25.455"/>
</kw>
<status status="PASS" starttime="20240415 12:17:25.426" endtime="20240415 12:17:25.455"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:17:25.455" endtime="20240415 12:17:25.455"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:17:25.455" endtime="20240415 12:17:25.456"/>
</branch>
<status status="PASS" starttime="20240415 12:17:25.426" endtime="20240415 12:17:25.456"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:17:25.478" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:17:25.456" endtime="20240415 12:17:25.482"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:17:25.482" endtime="20240415 12:17:26.401"/>
</kw>
<status status="PASS" starttime="20240415 12:17:03.789" endtime="20240415 12:17:26.401"/>
</iter>
<iter>
<var name="${index}">14</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:17:26.402" level="INFO">${TitleElement} = (//a[@class="title"])[14]</msg>
<status status="PASS" starttime="20240415 12:17:26.401" endtime="20240415 12:17:26.402"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:17:26.402" endtime="20240415 12:17:26.594"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:17:26.602" level="INFO">Clicking element '(//a[@class="title"])[14]'.</msg>
<status status="PASS" starttime="20240415 12:17:26.602" endtime="20240415 12:17:49.277"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:17:49.277" endtime="20240415 12:17:49.307"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:17:49.333" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:17:49.308" endtime="20240415 12:17:49.333"/>
</kw>
<msg timestamp="20240415 12:17:49.333" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:17:49.308" endtime="20240415 12:17:49.333"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:17:49.354" level="INFO">${abstractTxt} = A priority inversion occurs when a low-priority task causes the execution of a higher-priority task to be delayed. The possibility of priority inversions complicates the analysis of systems that use p...</msg>
<status status="PASS" starttime="20240415 12:17:49.333" endtime="20240415 12:17:49.355"/>
</kw>
<status status="PASS" starttime="20240415 12:17:49.333" endtime="20240415 12:17:49.355"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:17:49.355" endtime="20240415 12:17:49.355"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:17:49.355" endtime="20240415 12:17:49.355"/>
</branch>
<status status="PASS" starttime="20240415 12:17:49.333" endtime="20240415 12:17:49.355"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:17:49.375" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:17:49.355" endtime="20240415 12:17:49.375"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:17:49.375" endtime="20240415 12:17:50.240"/>
</kw>
<status status="PASS" starttime="20240415 12:17:26.401" endtime="20240415 12:17:50.240"/>
</iter>
<iter>
<var name="${index}">15</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:17:50.242" level="INFO">${TitleElement} = (//a[@class="title"])[15]</msg>
<status status="PASS" starttime="20240415 12:17:50.241" endtime="20240415 12:17:50.242"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:17:50.242" endtime="20240415 12:17:50.369"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:17:50.370" level="INFO">Clicking element '(//a[@class="title"])[15]'.</msg>
<status status="PASS" starttime="20240415 12:17:50.369" endtime="20240415 12:18:15.528"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:18:15.529" endtime="20240415 12:18:15.591"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:18:15.631" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:18:15.592" endtime="20240415 12:18:15.631"/>
</kw>
<msg timestamp="20240415 12:18:15.631" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:18:15.591" endtime="20240415 12:18:15.631"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:18:15.675" level="INFO">${abstractTxt} = In general computing systems, a job (process/task) may suspend itself whilst it is waiting for some activity to complete, e.g., an accelerator to return data. In real-time systems, such self-suspensio...</msg>
<status status="PASS" starttime="20240415 12:18:15.632" endtime="20240415 12:18:15.675"/>
</kw>
<status status="PASS" starttime="20240415 12:18:15.631" endtime="20240415 12:18:15.675"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:18:15.675" endtime="20240415 12:18:15.675"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:18:15.675" endtime="20240415 12:18:15.675"/>
</branch>
<status status="PASS" starttime="20240415 12:18:15.631" endtime="20240415 12:18:15.675"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:18:15.690" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:18:15.675" endtime="20240415 12:18:15.690"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:18:15.690" endtime="20240415 12:18:16.723"/>
</kw>
<status status="PASS" starttime="20240415 12:17:50.241" endtime="20240415 12:18:16.723"/>
</iter>
<iter>
<var name="${index}">16</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:18:16.724" level="INFO">${TitleElement} = (//a[@class="title"])[16]</msg>
<status status="PASS" starttime="20240415 12:18:16.724" endtime="20240415 12:18:16.725"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:18:16.725" endtime="20240415 12:18:16.834"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:18:16.836" level="INFO">Clicking element '(//a[@class="title"])[16]'.</msg>
<status status="PASS" starttime="20240415 12:18:16.834" endtime="20240415 12:18:39.999"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:18:39.999" endtime="20240415 12:18:40.049"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:18:40.085" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:18:40.050" endtime="20240415 12:18:40.085"/>
</kw>
<msg timestamp="20240415 12:18:40.085" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:18:40.050" endtime="20240415 12:18:40.085"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:18:40.111" level="INFO">${abstractTxt} = We propose a novel distributed algorithm for the minimum cut problem. Motivated by applications like volumetric segmentation in computer vision, we aim at solving large sparse problems. When the probl...</msg>
<status status="PASS" starttime="20240415 12:18:40.085" endtime="20240415 12:18:40.111"/>
</kw>
<status status="PASS" starttime="20240415 12:18:40.085" endtime="20240415 12:18:40.111"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:18:40.111" endtime="20240415 12:18:40.111"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:18:40.111" endtime="20240415 12:18:40.111"/>
</branch>
<status status="PASS" starttime="20240415 12:18:40.085" endtime="20240415 12:18:40.111"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:18:40.126" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:18:40.111" endtime="20240415 12:18:40.143"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:18:40.143" endtime="20240415 12:18:40.446"/>
</kw>
<status status="PASS" starttime="20240415 12:18:16.724" endtime="20240415 12:18:40.446"/>
</iter>
<iter>
<var name="${index}">17</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:18:40.448" level="INFO">${TitleElement} = (//a[@class="title"])[17]</msg>
<status status="PASS" starttime="20240415 12:18:40.447" endtime="20240415 12:18:40.448"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:18:40.448" endtime="20240415 12:18:40.555"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:18:40.556" level="INFO">Clicking element '(//a[@class="title"])[17]'.</msg>
<status status="PASS" starttime="20240415 12:18:40.555" endtime="20240415 12:19:03.280"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:19:03.281" endtime="20240415 12:19:03.333"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:19:03.513" level="INFO" html="true">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="selenium-screenshot-17.png"&gt;&lt;img src="selenium-screenshot-17.png" width="800px"&gt;&lt;/a&gt;</msg>
<msg timestamp="20240415 12:19:03.513" level="FAIL">Element with locator '//*[@id="Abs1-content"]/p' not found.</msg>
<status status="FAIL" starttime="20240415 12:19:03.333" endtime="20240415 12:19:04.582"/>
</kw>
<msg timestamp="20240415 12:19:04.582" level="INFO">${FirstType} = False</msg>
<status status="PASS" starttime="20240415 12:19:03.333" endtime="20240415 12:19:04.582"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:19:04.582" endtime="20240415 12:19:04.582"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:19:04.582" endtime="20240415 12:19:04.582"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:19:04.612" level="INFO">${abstractTxt} = This paper is concerned with the design of online scheduling algorithms that exploit extra resources. In particular, it studies how to make use of multiple processors to counteract the lack of future ...</msg>
<status status="PASS" starttime="20240415 12:19:04.582" endtime="20240415 12:19:04.612"/>
</kw>
<status status="PASS" starttime="20240415 12:19:04.582" endtime="20240415 12:19:04.612"/>
</branch>
<status status="PASS" starttime="20240415 12:19:04.582" endtime="20240415 12:19:04.612"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:19:04.637" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:19:04.612" endtime="20240415 12:19:04.642"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:19:04.642" endtime="20240415 12:19:05.610"/>
</kw>
<status status="PASS" starttime="20240415 12:18:40.447" endtime="20240415 12:19:05.610"/>
</iter>
<iter>
<var name="${index}">18</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:19:05.611" level="INFO">${TitleElement} = (//a[@class="title"])[18]</msg>
<status status="PASS" starttime="20240415 12:19:05.611" endtime="20240415 12:19:05.611"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:19:05.611" endtime="20240415 12:19:05.722"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:19:05.723" level="INFO">Clicking element '(//a[@class="title"])[18]'.</msg>
<status status="PASS" starttime="20240415 12:19:05.722" endtime="20240415 12:19:28.297"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:19:28.297" endtime="20240415 12:19:28.353"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:19:28.382" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:19:28.354" endtime="20240415 12:19:28.382"/>
</kw>
<msg timestamp="20240415 12:19:28.382" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:19:28.353" endtime="20240415 12:19:28.383"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:19:28.407" level="INFO">${abstractTxt} = We present a technique for analyzing the number of cache misses incurred by multithreaded cache oblivious algorithms on an idealized parallel machine in which each processor has a private cache. We sp...</msg>
<status status="PASS" starttime="20240415 12:19:28.383" endtime="20240415 12:19:28.407"/>
</kw>
<status status="PASS" starttime="20240415 12:19:28.383" endtime="20240415 12:19:28.407"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:19:28.407" endtime="20240415 12:19:28.408"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:19:28.407" endtime="20240415 12:19:28.408"/>
</branch>
<status status="PASS" starttime="20240415 12:19:28.383" endtime="20240415 12:19:28.408"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:19:28.419" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:19:28.408" endtime="20240415 12:19:28.435"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:19:28.435" endtime="20240415 12:19:29.280"/>
</kw>
<status status="PASS" starttime="20240415 12:19:05.610" endtime="20240415 12:19:29.280"/>
</iter>
<iter>
<var name="${index}">19</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:19:29.281" level="INFO">${TitleElement} = (//a[@class="title"])[19]</msg>
<status status="PASS" starttime="20240415 12:19:29.281" endtime="20240415 12:19:29.281"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:19:29.282" endtime="20240415 12:19:29.337"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:19:29.338" level="INFO">Clicking element '(//a[@class="title"])[19]'.</msg>
<status status="PASS" starttime="20240415 12:19:29.337" endtime="20240415 12:19:51.998"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:19:51.999" endtime="20240415 12:19:52.056"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:19:52.091" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:19:52.056" endtime="20240415 12:19:52.091"/>
</kw>
<msg timestamp="20240415 12:19:52.091" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:19:52.056" endtime="20240415 12:19:52.091"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:19:52.115" level="INFO">${abstractTxt} = Parallelizing (compute-intensive) discrete event simulation (DES) applications is a classical approach for speeding up their execution and for making very large/complex simulation models tractable. Th...</msg>
<status status="PASS" starttime="20240415 12:19:52.091" endtime="20240415 12:19:52.115"/>
</kw>
<status status="PASS" starttime="20240415 12:19:52.091" endtime="20240415 12:19:52.115"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:19:52.116" endtime="20240415 12:19:52.116"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:19:52.116" endtime="20240415 12:19:52.116"/>
</branch>
<status status="PASS" starttime="20240415 12:19:52.091" endtime="20240415 12:19:52.116"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:19:52.132" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:19:52.116" endtime="20240415 12:19:52.132"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:19:52.132" endtime="20240415 12:19:52.943"/>
</kw>
<status status="PASS" starttime="20240415 12:19:29.280" endtime="20240415 12:19:52.944"/>
</iter>
<status status="PASS" starttime="20240415 12:11:22.849" endtime="20240415 12:19:52.944"/>
</for>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${nextBTN}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:19:52.945" level="INFO">Clicking element '//*[@id="kb-nav--main"]/div[4]/form/a/img'.</msg>
<status status="PASS" starttime="20240415 12:19:52.944" endtime="20240415 12:19:54.574"/>
</kw>
<status status="PASS" starttime="20240415 12:11:22.736" endtime="20240415 12:19:54.574"/>
</iter>
<iter>
<var name="${page}">2</var>
<kw name="Get Element Count" library="SeleniumLibrary">
<var>${NumOfTitleInPage}</var>
<arg>${title}</arg>
<doc>Returns the number of elements matching ``locator``.</doc>
<msg timestamp="20240415 12:19:54.602" level="INFO">${NumOfTitleInPage} = 20</msg>
<status status="PASS" starttime="20240415 12:19:54.575" endtime="20240415 12:19:54.602"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>1</value>
<value>${NumOfTitleInPage}</value>
<iter>
<var name="${index}">1</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:19:54.604" level="INFO">${TitleElement} = (//a[@class="title"])[1]</msg>
<status status="PASS" starttime="20240415 12:19:54.603" endtime="20240415 12:19:54.604"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:19:54.605" endtime="20240415 12:19:54.636"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:19:54.637" level="INFO">Clicking element '(//a[@class="title"])[1]'.</msg>
<status status="PASS" starttime="20240415 12:19:54.636" endtime="20240415 12:20:26.158"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:20:26.158" endtime="20240415 12:20:26.204"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:20:26.232" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:20:26.205" endtime="20240415 12:20:26.232"/>
</kw>
<msg timestamp="20240415 12:20:26.232" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:20:26.205" endtime="20240415 12:20:26.232"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:20:26.256" level="INFO">${abstractTxt} = Blockchain-based consensus methods such as PoW (Proof of Work) and PoS (Proof of Stake) are widely used and favored these days, but each has disadvantages. One of the significant issues PoW encountere...</msg>
<status status="PASS" starttime="20240415 12:20:26.233" endtime="20240415 12:20:26.256"/>
</kw>
<status status="PASS" starttime="20240415 12:20:26.232" endtime="20240415 12:20:26.256"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:20:26.256" endtime="20240415 12:20:26.256"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:20:26.256" endtime="20240415 12:20:26.256"/>
</branch>
<status status="PASS" starttime="20240415 12:20:26.232" endtime="20240415 12:20:26.256"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:20:26.277" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:20:26.256" endtime="20240415 12:20:26.281"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:20:26.281" endtime="20240415 12:20:27.296"/>
</kw>
<status status="PASS" starttime="20240415 12:19:54.603" endtime="20240415 12:20:27.296"/>
</iter>
<iter>
<var name="${index}">2</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:20:27.297" level="INFO">${TitleElement} = (//a[@class="title"])[2]</msg>
<status status="PASS" starttime="20240415 12:20:27.297" endtime="20240415 12:20:27.297"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:20:27.298" endtime="20240415 12:20:27.358"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:20:27.359" level="INFO">Clicking element '(//a[@class="title"])[2]'.</msg>
<status status="PASS" starttime="20240415 12:20:27.358" endtime="20240415 12:20:49.759"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:20:49.759" endtime="20240415 12:20:49.823"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:20:49.849" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:20:49.824" endtime="20240415 12:20:49.849"/>
</kw>
<msg timestamp="20240415 12:20:49.850" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:20:49.824" endtime="20240415 12:20:49.850"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:20:49.875" level="INFO">${abstractTxt} = To analyze the research impact of the researcher, different bibliographic databases like Scopus, Web of Science, Google Scholar, etc. are accessed for evaluating the trend of publications and citation...</msg>
<status status="PASS" starttime="20240415 12:20:49.850" endtime="20240415 12:20:49.875"/>
</kw>
<status status="PASS" starttime="20240415 12:20:49.850" endtime="20240415 12:20:49.875"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:20:49.875" endtime="20240415 12:20:49.876"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:20:49.875" endtime="20240415 12:20:49.876"/>
</branch>
<status status="PASS" starttime="20240415 12:20:49.850" endtime="20240415 12:20:49.876"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:20:49.897" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:20:49.876" endtime="20240415 12:20:49.901"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:20:49.901" endtime="20240415 12:20:50.860"/>
</kw>
<status status="PASS" starttime="20240415 12:20:27.296" endtime="20240415 12:20:50.861"/>
</iter>
<iter>
<var name="${index}">3</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:20:50.861" level="INFO">${TitleElement} = (//a[@class="title"])[3]</msg>
<status status="PASS" starttime="20240415 12:20:50.861" endtime="20240415 12:20:50.861"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:20:50.861" endtime="20240415 12:20:50.908"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:20:50.909" level="INFO">Clicking element '(//a[@class="title"])[3]'.</msg>
<status status="PASS" starttime="20240415 12:20:50.908" endtime="20240415 12:21:21.929"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:21:21.929" endtime="20240415 12:21:21.993"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:21:22.023" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:21:21.993" endtime="20240415 12:21:22.023"/>
</kw>
<msg timestamp="20240415 12:21:22.024" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:21:21.993" endtime="20240415 12:21:22.024"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:21:22.046" level="INFO">${abstractTxt} = Decentralization for data storage is a challenging problem for blockchain-based solutions as the blocksize plays a key role for scalability. In addition, specific requirements of multimedia data call ...</msg>
<status status="PASS" starttime="20240415 12:21:22.024" endtime="20240415 12:21:22.046"/>
</kw>
<status status="PASS" starttime="20240415 12:21:22.024" endtime="20240415 12:21:22.046"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:21:22.046" endtime="20240415 12:21:22.046"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:21:22.046" endtime="20240415 12:21:22.047"/>
</branch>
<status status="PASS" starttime="20240415 12:21:22.024" endtime="20240415 12:21:22.047"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:21:22.068" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:21:22.047" endtime="20240415 12:21:22.072"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:21:22.073" endtime="20240415 12:21:24.884"/>
</kw>
<status status="PASS" starttime="20240415 12:20:50.861" endtime="20240415 12:21:24.884"/>
</iter>
<iter>
<var name="${index}">4</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:21:24.885" level="INFO">${TitleElement} = (//a[@class="title"])[4]</msg>
<status status="PASS" starttime="20240415 12:21:24.885" endtime="20240415 12:21:24.885"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:21:24.885" endtime="20240415 12:21:24.929"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:21:24.930" level="INFO">Clicking element '(//a[@class="title"])[4]'.</msg>
<status status="PASS" starttime="20240415 12:21:24.929" endtime="20240415 12:21:47.522"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:21:47.523" endtime="20240415 12:21:47.579"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:21:47.589" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:21:47.580" endtime="20240415 12:21:47.589"/>
</kw>
<msg timestamp="20240415 12:21:47.589" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:21:47.579" endtime="20240415 12:21:47.589"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:21:47.616" level="INFO">${abstractTxt} = Blockchain networks have attracted tremendous attention for creating cryptocurrencies and decentralized economies built on peer-to-peer protocols. However, the complex nature of the dynamics and feedb...</msg>
<status status="PASS" starttime="20240415 12:21:47.589" endtime="20240415 12:21:47.616"/>
</kw>
<status status="PASS" starttime="20240415 12:21:47.589" endtime="20240415 12:21:47.616"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:21:47.616" endtime="20240415 12:21:47.616"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:21:47.616" endtime="20240415 12:21:47.616"/>
</branch>
<status status="PASS" starttime="20240415 12:21:47.589" endtime="20240415 12:21:47.616"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:21:47.631" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:21:47.616" endtime="20240415 12:21:47.649"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:21:47.650" endtime="20240415 12:21:48.538"/>
</kw>
<status status="PASS" starttime="20240415 12:21:24.884" endtime="20240415 12:21:48.538"/>
</iter>
<iter>
<var name="${index}">5</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:21:48.539" level="INFO">${TitleElement} = (//a[@class="title"])[5]</msg>
<status status="PASS" starttime="20240415 12:21:48.539" endtime="20240415 12:21:48.539"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:21:48.540" endtime="20240415 12:21:48.662"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:21:48.663" level="INFO">Clicking element '(//a[@class="title"])[5]'.</msg>
<status status="PASS" starttime="20240415 12:21:48.662" endtime="20240415 12:22:11.022"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:22:11.022" endtime="20240415 12:22:11.081"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:22:11.116" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:22:11.081" endtime="20240415 12:22:11.116"/>
</kw>
<msg timestamp="20240415 12:22:11.116" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:22:11.081" endtime="20240415 12:22:11.117"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:22:11.140" level="INFO">${abstractTxt} = In Web 2.0-based social networks, users suffer from authorities of service providers and politicians, such as revoking users, removing content, and selling users’ sensitive information. The concept of...</msg>
<status status="PASS" starttime="20240415 12:22:11.117" endtime="20240415 12:22:11.141"/>
</kw>
<status status="PASS" starttime="20240415 12:22:11.117" endtime="20240415 12:22:11.141"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:22:11.141" endtime="20240415 12:22:11.141"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:22:11.141" endtime="20240415 12:22:11.141"/>
</branch>
<status status="PASS" starttime="20240415 12:22:11.117" endtime="20240415 12:22:11.141"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:22:11.157" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:22:11.141" endtime="20240415 12:22:11.157"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:22:11.157" endtime="20240415 12:22:12.295"/>
</kw>
<status status="PASS" starttime="20240415 12:21:48.538" endtime="20240415 12:22:12.295"/>
</iter>
<iter>
<var name="${index}">6</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:22:12.295" level="INFO">${TitleElement} = (//a[@class="title"])[6]</msg>
<status status="PASS" starttime="20240415 12:22:12.295" endtime="20240415 12:22:12.296"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:22:12.296" endtime="20240415 12:22:12.395"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:22:12.396" level="INFO">Clicking element '(//a[@class="title"])[6]'.</msg>
<status status="PASS" starttime="20240415 12:22:12.395" endtime="20240415 12:22:34.928"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:22:34.928" endtime="20240415 12:22:34.987"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:22:35.013" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:22:34.988" endtime="20240415 12:22:35.013"/>
</kw>
<msg timestamp="20240415 12:22:35.013" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:22:34.988" endtime="20240415 12:22:35.013"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:22:35.035" level="INFO">${abstractTxt} = Nowadays enterprises implement blockchain technology in various industries, including finance, logistics, and other sectors. While the core idea behind blockchain is to decentralize storage, enterpris...</msg>
<status status="PASS" starttime="20240415 12:22:35.013" endtime="20240415 12:22:35.035"/>
</kw>
<status status="PASS" starttime="20240415 12:22:35.013" endtime="20240415 12:22:35.035"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:22:35.035" endtime="20240415 12:22:35.035"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:22:35.035" endtime="20240415 12:22:35.035"/>
</branch>
<status status="PASS" starttime="20240415 12:22:35.013" endtime="20240415 12:22:35.035"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:22:35.056" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:22:35.035" endtime="20240415 12:22:35.061"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:22:35.061" endtime="20240415 12:22:35.932"/>
</kw>
<status status="PASS" starttime="20240415 12:22:12.295" endtime="20240415 12:22:35.932"/>
</iter>
<iter>
<var name="${index}">7</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:22:35.934" level="INFO">${TitleElement} = (//a[@class="title"])[7]</msg>
<status status="PASS" starttime="20240415 12:22:35.933" endtime="20240415 12:22:35.934"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:22:35.934" endtime="20240415 12:22:36.057"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:22:36.059" level="INFO">Clicking element '(//a[@class="title"])[7]'.</msg>
<status status="PASS" starttime="20240415 12:22:36.058" endtime="20240415 12:22:58.854"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:22:58.854" endtime="20240415 12:22:58.931"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:22:58.962" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:22:58.931" endtime="20240415 12:22:58.962"/>
</kw>
<msg timestamp="20240415 12:22:58.962" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:22:58.931" endtime="20240415 12:22:58.962"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:22:59.002" level="INFO">${abstractTxt} = Large scale distributed databases are designed to support commercial and cloud based applications. The minimal expectation from such systems is that they ensure consistency and reliability in case of ...</msg>
<status status="PASS" starttime="20240415 12:22:58.962" endtime="20240415 12:22:59.002"/>
</kw>
<status status="PASS" starttime="20240415 12:22:58.962" endtime="20240415 12:22:59.002"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:22:59.002" endtime="20240415 12:22:59.002"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:22:59.002" endtime="20240415 12:22:59.002"/>
</branch>
<status status="PASS" starttime="20240415 12:22:58.962" endtime="20240415 12:22:59.002"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:22:59.017" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:22:59.002" endtime="20240415 12:22:59.028"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:22:59.028" endtime="20240415 12:22:59.938"/>
</kw>
<status status="PASS" starttime="20240415 12:22:35.933" endtime="20240415 12:22:59.938"/>
</iter>
<iter>
<var name="${index}">8</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:22:59.939" level="INFO">${TitleElement} = (//a[@class="title"])[8]</msg>
<status status="PASS" starttime="20240415 12:22:59.938" endtime="20240415 12:22:59.939"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:22:59.939" endtime="20240415 12:23:00.072"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:23:00.073" level="INFO">Clicking element '(//a[@class="title"])[8]'.</msg>
<status status="PASS" starttime="20240415 12:23:00.072" endtime="20240415 12:23:23.035"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:23:23.035" endtime="20240415 12:23:23.093"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:23:23.123" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:23:23.094" endtime="20240415 12:23:23.123"/>
</kw>
<msg timestamp="20240415 12:23:23.123" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:23:23.094" endtime="20240415 12:23:23.123"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:23:23.148" level="INFO">${abstractTxt} = The present article proceeds from the mainstream view that the conceptual framework underpinning adversarial systems of criminal adjudication, i.e. a mixture of common-sense philosophy and probabilist...</msg>
<status status="PASS" starttime="20240415 12:23:23.123" endtime="20240415 12:23:23.148"/>
</kw>
<status status="PASS" starttime="20240415 12:23:23.123" endtime="20240415 12:23:23.148"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:23:23.148" endtime="20240415 12:23:23.148"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:23:23.148" endtime="20240415 12:23:23.149"/>
</branch>
<status status="PASS" starttime="20240415 12:23:23.123" endtime="20240415 12:23:23.149"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:23:23.163" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:23:23.149" endtime="20240415 12:23:23.173"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:23:23.173" endtime="20240415 12:23:24.085"/>
</kw>
<status status="PASS" starttime="20240415 12:22:59.938" endtime="20240415 12:23:24.085"/>
</iter>
<iter>
<var name="${index}">9</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:23:24.086" level="INFO">${TitleElement} = (//a[@class="title"])[9]</msg>
<status status="PASS" starttime="20240415 12:23:24.085" endtime="20240415 12:23:24.086"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:23:24.086" endtime="20240415 12:23:24.186"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:23:24.187" level="INFO">Clicking element '(//a[@class="title"])[9]'.</msg>
<status status="PASS" starttime="20240415 12:23:24.186" endtime="20240415 12:23:47.190"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:23:47.191" endtime="20240415 12:23:47.253"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:23:47.292" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:23:47.254" endtime="20240415 12:23:47.292"/>
</kw>
<msg timestamp="20240415 12:23:47.292" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:23:47.253" endtime="20240415 12:23:47.292"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:23:47.324" level="INFO">${abstractTxt} = Reaching agreement among processes sharing read/write memory is possible only in the presence of an eventual unique leader. A leader that fails must be recoverable, but on the other hand, a live and w...</msg>
<status status="PASS" starttime="20240415 12:23:47.292" endtime="20240415 12:23:47.324"/>
</kw>
<status status="PASS" starttime="20240415 12:23:47.292" endtime="20240415 12:23:47.325"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:23:47.325" endtime="20240415 12:23:47.325"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:23:47.325" endtime="20240415 12:23:47.325"/>
</branch>
<status status="PASS" starttime="20240415 12:23:47.292" endtime="20240415 12:23:47.325"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:23:47.333" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:23:47.325" endtime="20240415 12:23:47.349"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:23:47.350" endtime="20240415 12:23:48.254"/>
</kw>
<status status="PASS" starttime="20240415 12:23:24.085" endtime="20240415 12:23:48.254"/>
</iter>
<iter>
<var name="${index}">10</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:23:48.255" level="INFO">${TitleElement} = (//a[@class="title"])[10]</msg>
<status status="PASS" starttime="20240415 12:23:48.255" endtime="20240415 12:23:48.255"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:23:48.255" endtime="20240415 12:23:48.379"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:23:48.380" level="INFO">Clicking element '(//a[@class="title"])[10]'.</msg>
<status status="PASS" starttime="20240415 12:23:48.379" endtime="20240415 12:24:19.964"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:24:19.965" endtime="20240415 12:24:20.010"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:24:20.040" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:24:20.010" endtime="20240415 12:24:20.040"/>
</kw>
<msg timestamp="20240415 12:24:20.040" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:24:20.010" endtime="20240415 12:24:20.040"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:24:20.065" level="INFO">${abstractTxt} = GUI design isn't simply a matter of putting a nice front-end on a capable program. It requires thought about the way in which people might be expected to use a system, and investigation of the ways th...</msg>
<status status="PASS" starttime="20240415 12:24:20.040" endtime="20240415 12:24:20.065"/>
</kw>
<status status="PASS" starttime="20240415 12:24:20.040" endtime="20240415 12:24:20.065"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:24:20.065" endtime="20240415 12:24:20.065"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:24:20.065" endtime="20240415 12:24:20.065"/>
</branch>
<status status="PASS" starttime="20240415 12:24:20.040" endtime="20240415 12:24:20.065"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:24:20.082" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:24:20.066" endtime="20240415 12:24:20.082"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:24:20.082" endtime="20240415 12:24:21.081"/>
</kw>
<status status="PASS" starttime="20240415 12:23:48.255" endtime="20240415 12:24:21.081"/>
</iter>
<iter>
<var name="${index}">11</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:24:21.082" level="INFO">${TitleElement} = (//a[@class="title"])[11]</msg>
<status status="PASS" starttime="20240415 12:24:21.082" endtime="20240415 12:24:21.082"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:24:21.083" endtime="20240415 12:24:21.214"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:24:21.216" level="INFO">Clicking element '(//a[@class="title"])[11]'.</msg>
<status status="PASS" starttime="20240415 12:24:21.214" endtime="20240415 12:24:43.638"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:24:43.638" endtime="20240415 12:24:43.707"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:24:43.736" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:24:43.708" endtime="20240415 12:24:43.736"/>
</kw>
<msg timestamp="20240415 12:24:43.736" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:24:43.707" endtime="20240415 12:24:43.736"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:24:43.760" level="INFO">${abstractTxt} = We consider the scheduling of a sporadic real-time task system on an identical multiprocessor. Though Pfair algorithms are theoretically optimal for such task systems, in practice, their runtime overh...</msg>
<status status="PASS" starttime="20240415 12:24:43.737" endtime="20240415 12:24:43.760"/>
</kw>
<status status="PASS" starttime="20240415 12:24:43.737" endtime="20240415 12:24:43.760"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:24:43.760" endtime="20240415 12:24:43.760"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:24:43.760" endtime="20240415 12:24:43.760"/>
</branch>
<status status="PASS" starttime="20240415 12:24:43.736" endtime="20240415 12:24:43.760"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:24:43.781" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:24:43.760" endtime="20240415 12:24:43.785"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:24:43.786" endtime="20240415 12:24:44.634"/>
</kw>
<status status="PASS" starttime="20240415 12:24:21.081" endtime="20240415 12:24:44.634"/>
</iter>
<iter>
<var name="${index}">12</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:24:44.635" level="INFO">${TitleElement} = (//a[@class="title"])[12]</msg>
<status status="PASS" starttime="20240415 12:24:44.635" endtime="20240415 12:24:44.635"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:24:44.636" endtime="20240415 12:24:44.770"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:24:44.771" level="INFO">Clicking element '(//a[@class="title"])[12]'.</msg>
<status status="PASS" starttime="20240415 12:24:44.770" endtime="20240415 12:25:07.076"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:25:07.076" endtime="20240415 12:25:07.120"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:25:07.159" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:25:07.120" endtime="20240415 12:25:07.159"/>
</kw>
<msg timestamp="20240415 12:25:07.159" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:25:07.120" endtime="20240415 12:25:07.159"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:25:07.219" level="INFO">${abstractTxt} = The mathematical proof checker Mizar by Andrzej Trybulec uses a proof input language that is much more readable than the input languages of most other proof assistants. This system also differs in man...</msg>
<status status="PASS" starttime="20240415 12:25:07.159" endtime="20240415 12:25:07.219"/>
</kw>
<status status="PASS" starttime="20240415 12:25:07.159" endtime="20240415 12:25:07.219"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:25:07.219" endtime="20240415 12:25:07.219"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:25:07.219" endtime="20240415 12:25:07.219"/>
</branch>
<status status="PASS" starttime="20240415 12:25:07.159" endtime="20240415 12:25:07.219"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:25:07.244" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:25:07.219" endtime="20240415 12:25:07.255"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:25:07.255" endtime="20240415 12:25:08.162"/>
</kw>
<status status="PASS" starttime="20240415 12:24:44.635" endtime="20240415 12:25:08.162"/>
</iter>
<iter>
<var name="${index}">13</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:25:08.163" level="INFO">${TitleElement} = (//a[@class="title"])[13]</msg>
<status status="PASS" starttime="20240415 12:25:08.162" endtime="20240415 12:25:08.163"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:25:08.163" endtime="20240415 12:25:08.259"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:25:08.259" level="INFO">Clicking element '(//a[@class="title"])[13]'.</msg>
<status status="PASS" starttime="20240415 12:25:08.259" endtime="20240415 12:25:30.319"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:25:30.319" endtime="20240415 12:25:30.383"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:25:30.409" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:25:30.383" endtime="20240415 12:25:30.410"/>
</kw>
<msg timestamp="20240415 12:25:30.410" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:25:30.383" endtime="20240415 12:25:30.410"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:25:30.437" level="INFO">${abstractTxt} = A number of data-driven execution models have been proposed for parallel execution of logic programs8, 12, 9, 3) LogDf is an abstract data-driven execution model for pure logic programs3) which has sh...</msg>
<status status="PASS" starttime="20240415 12:25:30.410" endtime="20240415 12:25:30.437"/>
</kw>
<status status="PASS" starttime="20240415 12:25:30.410" endtime="20240415 12:25:30.437"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:25:30.437" endtime="20240415 12:25:30.437"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:25:30.437" endtime="20240415 12:25:30.437"/>
</branch>
<status status="PASS" starttime="20240415 12:25:30.410" endtime="20240415 12:25:30.437"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:25:30.459" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:25:30.437" endtime="20240415 12:25:30.463"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:25:30.463" endtime="20240415 12:25:31.455"/>
</kw>
<status status="PASS" starttime="20240415 12:25:08.162" endtime="20240415 12:25:31.455"/>
</iter>
<iter>
<var name="${index}">14</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:25:31.456" level="INFO">${TitleElement} = (//a[@class="title"])[14]</msg>
<status status="PASS" starttime="20240415 12:25:31.456" endtime="20240415 12:25:31.456"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:25:31.457" endtime="20240415 12:25:31.531"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:25:31.532" level="INFO">Clicking element '(//a[@class="title"])[14]'.</msg>
<status status="PASS" starttime="20240415 12:25:31.531" endtime="20240415 12:25:53.732"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:25:53.732" endtime="20240415 12:25:53.772"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:25:53.806" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:25:53.772" endtime="20240415 12:25:53.806"/>
</kw>
<msg timestamp="20240415 12:25:53.807" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:25:53.772" endtime="20240415 12:25:53.807"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:25:53.839" level="INFO">${abstractTxt} = The problem of representing a setU≜{u 1,...,u m} of read-write variables on ann-node distributed-memory parallel computer is considered. It is shown thatU can be represented among then nodes of a vari...</msg>
<status status="PASS" starttime="20240415 12:25:53.807" endtime="20240415 12:25:53.839"/>
</kw>
<status status="PASS" starttime="20240415 12:25:53.807" endtime="20240415 12:25:53.839"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:25:53.840" endtime="20240415 12:25:53.840"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:25:53.839" endtime="20240415 12:25:53.840"/>
</branch>
<status status="PASS" starttime="20240415 12:25:53.807" endtime="20240415 12:25:53.840"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:25:53.861" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:25:53.840" endtime="20240415 12:25:53.865"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:25:53.865" endtime="20240415 12:25:54.850"/>
</kw>
<status status="PASS" starttime="20240415 12:25:31.455" endtime="20240415 12:25:54.850"/>
</iter>
<iter>
<var name="${index}">15</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:25:54.851" level="INFO">${TitleElement} = (//a[@class="title"])[15]</msg>
<status status="PASS" starttime="20240415 12:25:54.850" endtime="20240415 12:25:54.851"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:25:54.851" endtime="20240415 12:25:54.956"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:25:54.957" level="INFO">Clicking element '(//a[@class="title"])[15]'.</msg>
<status status="PASS" starttime="20240415 12:25:54.956" endtime="20240415 12:26:17.553"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:26:17.553" endtime="20240415 12:26:17.607"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:26:17.635" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:26:17.607" endtime="20240415 12:26:17.635"/>
</kw>
<msg timestamp="20240415 12:26:17.635" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:26:17.607" endtime="20240415 12:26:17.635"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:26:17.663" level="INFO">${abstractTxt} = This paper presents a distributed, energy-aware method for the autonomous deployment and maintenance of battery-powered robots within a known or unknown region in 2D space. Our approach does not rely ...</msg>
<status status="PASS" starttime="20240415 12:26:17.635" endtime="20240415 12:26:17.663"/>
</kw>
<status status="PASS" starttime="20240415 12:26:17.635" endtime="20240415 12:26:17.663"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:26:17.663" endtime="20240415 12:26:17.663"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:26:17.663" endtime="20240415 12:26:17.663"/>
</branch>
<status status="PASS" starttime="20240415 12:26:17.635" endtime="20240415 12:26:17.663"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:26:17.702" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:26:17.663" endtime="20240415 12:26:17.708"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:26:17.708" endtime="20240415 12:26:19.033"/>
</kw>
<status status="PASS" starttime="20240415 12:25:54.850" endtime="20240415 12:26:19.034"/>
</iter>
<iter>
<var name="${index}">16</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:26:19.034" level="INFO">${TitleElement} = (//a[@class="title"])[16]</msg>
<status status="PASS" starttime="20240415 12:26:19.034" endtime="20240415 12:26:19.035"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:26:19.035" endtime="20240415 12:26:19.134"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:26:19.135" level="INFO">Clicking element '(//a[@class="title"])[16]'.</msg>
<status status="PASS" starttime="20240415 12:26:19.134" endtime="20240415 12:26:50.989"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:26:50.989" endtime="20240415 12:26:51.052"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:26:51.083" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:26:51.053" endtime="20240415 12:26:51.084"/>
</kw>
<msg timestamp="20240415 12:26:51.084" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:26:51.052" endtime="20240415 12:26:51.084"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:26:51.115" level="INFO">${abstractTxt} = Traversal is a fundamental procedure in most parallel graph algorithms. To explore the massive fine-grained parallelism in graph traversal, the fine-grained data synchronization is critical. On commod...</msg>
<status status="PASS" starttime="20240415 12:26:51.084" endtime="20240415 12:26:51.115"/>
</kw>
<status status="PASS" starttime="20240415 12:26:51.084" endtime="20240415 12:26:51.115"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:26:51.115" endtime="20240415 12:26:51.115"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:26:51.115" endtime="20240415 12:26:51.115"/>
</branch>
<status status="PASS" starttime="20240415 12:26:51.084" endtime="20240415 12:26:51.115"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:26:51.123" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:26:51.115" endtime="20240415 12:26:51.140"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:26:51.140" endtime="20240415 12:26:52.159"/>
</kw>
<status status="PASS" starttime="20240415 12:26:19.034" endtime="20240415 12:26:52.159"/>
</iter>
<iter>
<var name="${index}">17</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:26:52.160" level="INFO">${TitleElement} = (//a[@class="title"])[17]</msg>
<status status="PASS" starttime="20240415 12:26:52.159" endtime="20240415 12:26:52.160"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:26:52.160" endtime="20240415 12:26:52.290"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:26:52.291" level="INFO">Clicking element '(//a[@class="title"])[17]'.</msg>
<status status="PASS" starttime="20240415 12:26:52.290" endtime="20240415 12:27:14.760"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:27:14.761" endtime="20240415 12:27:14.821"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:27:14.851" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:27:14.822" endtime="20240415 12:27:14.851"/>
</kw>
<msg timestamp="20240415 12:27:14.852" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:27:14.821" endtime="20240415 12:27:14.852"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:27:14.877" level="INFO">${abstractTxt} = We introduce the recovery-oriented programming paradigm. Programs that are designed according to the recovery-oriented programming paradigm include, as an integral part, the important safety and liven...</msg>
<status status="PASS" starttime="20240415 12:27:14.852" endtime="20240415 12:27:14.877"/>
</kw>
<status status="PASS" starttime="20240415 12:27:14.852" endtime="20240415 12:27:14.878"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:27:14.878" endtime="20240415 12:27:14.878"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:27:14.878" endtime="20240415 12:27:14.878"/>
</branch>
<status status="PASS" starttime="20240415 12:27:14.852" endtime="20240415 12:27:14.878"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:27:14.892" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:27:14.878" endtime="20240415 12:27:14.892"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:27:14.892" endtime="20240415 12:27:15.762"/>
</kw>
<status status="PASS" starttime="20240415 12:26:52.159" endtime="20240415 12:27:15.762"/>
</iter>
<iter>
<var name="${index}">18</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:27:15.763" level="INFO">${TitleElement} = (//a[@class="title"])[18]</msg>
<status status="PASS" starttime="20240415 12:27:15.762" endtime="20240415 12:27:15.763"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:27:15.763" endtime="20240415 12:27:15.839"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:27:15.840" level="INFO">Clicking element '(//a[@class="title"])[18]'.</msg>
<status status="PASS" starttime="20240415 12:27:15.839" endtime="20240415 12:27:46.951"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:27:46.952" endtime="20240415 12:27:47.004"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:27:47.031" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:27:47.005" endtime="20240415 12:27:47.031"/>
</kw>
<msg timestamp="20240415 12:27:47.031" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:27:47.005" endtime="20240415 12:27:47.031"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:27:47.060" level="INFO">${abstractTxt} = A growing set of applications require access to digital video and audio. In order to provide playback of such continuous media (CM), scheduling strategies for CM data servers (CMS) are necessary. In s...</msg>
<status status="PASS" starttime="20240415 12:27:47.032" endtime="20240415 12:27:47.060"/>
</kw>
<status status="PASS" starttime="20240415 12:27:47.032" endtime="20240415 12:27:47.060"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:27:47.061" endtime="20240415 12:27:47.061"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:27:47.060" endtime="20240415 12:27:47.061"/>
</branch>
<status status="PASS" starttime="20240415 12:27:47.031" endtime="20240415 12:27:47.061"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:27:47.077" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:27:47.061" endtime="20240415 12:27:47.077"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:27:47.077" endtime="20240415 12:27:47.764"/>
</kw>
<status status="PASS" starttime="20240415 12:27:15.762" endtime="20240415 12:27:47.764"/>
</iter>
<iter>
<var name="${index}">19</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:27:47.765" level="INFO">${TitleElement} = (//a[@class="title"])[19]</msg>
<status status="PASS" starttime="20240415 12:27:47.764" endtime="20240415 12:27:47.765"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:27:47.765" endtime="20240415 12:27:48.026"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:27:48.028" level="INFO">Clicking element '(//a[@class="title"])[19]'.</msg>
<status status="PASS" starttime="20240415 12:27:48.026" endtime="20240415 12:28:10.839"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:28:10.839" endtime="20240415 12:28:10.887"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:28:10.922" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:28:10.888" endtime="20240415 12:28:10.922"/>
</kw>
<msg timestamp="20240415 12:28:10.922" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:28:10.888" endtime="20240415 12:28:10.922"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:28:10.945" level="INFO">${abstractTxt} = Model checkers frequently fail to completely verify a concurrent program, even if partial-order reduction is applied. The verification engineer is left in doubt whether the program is safe and the eff...</msg>
<status status="PASS" starttime="20240415 12:28:10.922" endtime="20240415 12:28:10.945"/>
</kw>
<status status="PASS" starttime="20240415 12:28:10.922" endtime="20240415 12:28:10.945"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:28:10.945" endtime="20240415 12:28:10.945"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:28:10.945" endtime="20240415 12:28:10.945"/>
</branch>
<status status="PASS" starttime="20240415 12:28:10.922" endtime="20240415 12:28:10.945"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:28:10.960" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:28:10.945" endtime="20240415 12:28:10.973"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:28:10.974" endtime="20240415 12:28:11.822"/>
</kw>
<status status="PASS" starttime="20240415 12:27:47.764" endtime="20240415 12:28:11.822"/>
</iter>
<status status="PASS" starttime="20240415 12:19:54.603" endtime="20240415 12:28:11.823"/>
</for>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${nextBTN}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:28:11.824" level="INFO">Clicking element '//*[@id="kb-nav--main"]/div[4]/form/a/img'.</msg>
<status status="PASS" starttime="20240415 12:28:11.823" endtime="20240415 12:28:13.597"/>
</kw>
<status status="PASS" starttime="20240415 12:19:54.575" endtime="20240415 12:28:13.597"/>
</iter>
<iter>
<var name="${page}">3</var>
<kw name="Get Element Count" library="SeleniumLibrary">
<var>${NumOfTitleInPage}</var>
<arg>${title}</arg>
<doc>Returns the number of elements matching ``locator``.</doc>
<msg timestamp="20240415 12:28:13.657" level="INFO">${NumOfTitleInPage} = 20</msg>
<status status="PASS" starttime="20240415 12:28:13.597" endtime="20240415 12:28:13.657"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>1</value>
<value>${NumOfTitleInPage}</value>
<iter>
<var name="${index}">1</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:28:13.658" level="INFO">${TitleElement} = (//a[@class="title"])[1]</msg>
<status status="PASS" starttime="20240415 12:28:13.657" endtime="20240415 12:28:13.658"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:28:13.658" endtime="20240415 12:28:13.701"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:28:13.702" level="INFO">Clicking element '(//a[@class="title"])[1]'.</msg>
<status status="PASS" starttime="20240415 12:28:13.701" endtime="20240415 12:28:35.984"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:28:35.984" endtime="20240415 12:28:36.027"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:28:36.072" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:28:36.028" endtime="20240415 12:28:36.073"/>
</kw>
<msg timestamp="20240415 12:28:36.073" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:28:36.027" endtime="20240415 12:28:36.073"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:28:36.100" level="INFO">${abstractTxt} = We present an experience report on automating the verification of the software barrier synchronization primitive. The informal specification of the primitive is: when a thread calls the software barri...</msg>
<status status="PASS" starttime="20240415 12:28:36.073" endtime="20240415 12:28:36.100"/>
</kw>
<status status="PASS" starttime="20240415 12:28:36.073" endtime="20240415 12:28:36.100"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:28:36.101" endtime="20240415 12:28:36.101"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:28:36.101" endtime="20240415 12:28:36.101"/>
</branch>
<status status="PASS" starttime="20240415 12:28:36.073" endtime="20240415 12:28:36.101"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:28:36.122" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:28:36.101" endtime="20240415 12:28:36.126"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:28:36.127" endtime="20240415 12:29:06.856"/>
</kw>
<status status="PASS" starttime="20240415 12:28:13.657" endtime="20240415 12:29:06.856"/>
</iter>
<iter>
<var name="${index}">2</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:29:06.857" level="INFO">${TitleElement} = (//a[@class="title"])[2]</msg>
<status status="PASS" starttime="20240415 12:29:06.857" endtime="20240415 12:29:06.858"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:29:06.858" endtime="20240415 12:29:06.902"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:29:06.903" level="INFO">Clicking element '(//a[@class="title"])[2]'.</msg>
<status status="PASS" starttime="20240415 12:29:06.903" endtime="20240415 12:29:38.100"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:29:38.100" endtime="20240415 12:29:38.168"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:29:38.208" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:29:38.168" endtime="20240415 12:29:38.208"/>
</kw>
<msg timestamp="20240415 12:29:38.208" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:29:38.168" endtime="20240415 12:29:38.208"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:29:38.233" level="INFO">${abstractTxt} = Research on P2P data structures has tacitly assumed that peers readily participate in the work, i.e., are cooperative. But such participation is voluntary, and free riding is the dominant strategy. Th...</msg>
<status status="PASS" starttime="20240415 12:29:38.209" endtime="20240415 12:29:38.233"/>
</kw>
<status status="PASS" starttime="20240415 12:29:38.209" endtime="20240415 12:29:38.233"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:29:38.233" endtime="20240415 12:29:38.233"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:29:38.233" endtime="20240415 12:29:38.233"/>
</branch>
<status status="PASS" starttime="20240415 12:29:38.209" endtime="20240415 12:29:38.233"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:29:38.263" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:29:38.233" endtime="20240415 12:29:38.263"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:29:38.268" endtime="20240415 12:29:39.340"/>
</kw>
<status status="PASS" starttime="20240415 12:29:06.856" endtime="20240415 12:29:39.340"/>
</iter>
<iter>
<var name="${index}">3</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:29:39.341" level="INFO">${TitleElement} = (//a[@class="title"])[3]</msg>
<status status="PASS" starttime="20240415 12:29:39.340" endtime="20240415 12:29:39.341"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:29:39.341" endtime="20240415 12:29:39.408"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:29:39.409" level="INFO">Clicking element '(//a[@class="title"])[3]'.</msg>
<status status="PASS" starttime="20240415 12:29:39.408" endtime="20240415 12:30:10.358"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:30:10.358" endtime="20240415 12:30:10.405"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:30:10.437" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:30:10.407" endtime="20240415 12:30:10.437"/>
</kw>
<msg timestamp="20240415 12:30:10.437" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:30:10.406" endtime="20240415 12:30:10.437"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:30:10.460" level="INFO">${abstractTxt} = In many real-time applications, the set of tasks in the system, as well as the characteristics of the tasks, change during system execution. Specifically, the system moves from one mode of execution t...</msg>
<status status="PASS" starttime="20240415 12:30:10.438" endtime="20240415 12:30:10.461"/>
</kw>
<status status="PASS" starttime="20240415 12:30:10.437" endtime="20240415 12:30:10.461"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:30:10.461" endtime="20240415 12:30:10.461"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:30:10.461" endtime="20240415 12:30:10.461"/>
</branch>
<status status="PASS" starttime="20240415 12:30:10.437" endtime="20240415 12:30:10.461"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:30:10.483" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:30:10.461" endtime="20240415 12:30:10.488"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:30:10.488" endtime="20240415 12:30:11.215"/>
</kw>
<status status="PASS" starttime="20240415 12:29:39.340" endtime="20240415 12:30:11.215"/>
</iter>
<iter>
<var name="${index}">4</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:30:11.215" level="INFO">${TitleElement} = (//a[@class="title"])[4]</msg>
<status status="PASS" starttime="20240415 12:30:11.215" endtime="20240415 12:30:11.215"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:30:11.215" endtime="20240415 12:30:11.467"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:30:11.467" level="INFO">Clicking element '(//a[@class="title"])[4]'.</msg>
<status status="PASS" starttime="20240415 12:30:11.467" endtime="20240415 12:30:33.829"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:30:33.830" endtime="20240415 12:30:33.892"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:30:33.918" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:30:33.892" endtime="20240415 12:30:33.918"/>
</kw>
<msg timestamp="20240415 12:30:33.919" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:30:33.892" endtime="20240415 12:30:33.919"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:30:33.946" level="INFO">${abstractTxt} = The issues surrounding the question of atomicity, both in the past and nowadays, are briefly reviewed, and a picture of an ACID (atomic, consistent, isolated, durable) transaction as a refinement prob...</msg>
<status status="PASS" starttime="20240415 12:30:33.919" endtime="20240415 12:30:33.946"/>
</kw>
<status status="PASS" starttime="20240415 12:30:33.919" endtime="20240415 12:30:33.946"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:30:33.946" endtime="20240415 12:30:33.946"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:30:33.946" endtime="20240415 12:30:33.946"/>
</branch>
<status status="PASS" starttime="20240415 12:30:33.919" endtime="20240415 12:30:33.946"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:30:33.968" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:30:33.947" endtime="20240415 12:30:33.970"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:30:33.970" endtime="20240415 12:30:34.922"/>
</kw>
<status status="PASS" starttime="20240415 12:30:11.215" endtime="20240415 12:30:34.922"/>
</iter>
<iter>
<var name="${index}">5</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:30:34.923" level="INFO">${TitleElement} = (//a[@class="title"])[5]</msg>
<status status="PASS" starttime="20240415 12:30:34.923" endtime="20240415 12:30:34.923"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:30:34.924" endtime="20240415 12:30:35.005"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:30:35.006" level="INFO">Clicking element '(//a[@class="title"])[5]'.</msg>
<status status="PASS" starttime="20240415 12:30:35.005" endtime="20240415 12:31:05.905"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:31:05.906" endtime="20240415 12:31:05.962"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:31:05.997" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:31:05.963" endtime="20240415 12:31:05.997"/>
</kw>
<msg timestamp="20240415 12:31:05.998" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:31:05.962" endtime="20240415 12:31:05.998"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:31:06.024" level="INFO">${abstractTxt} = This paper describes a security architecture for mobile agent based systems. It defines the notion of a security-enhanced agent and outlines security management components in agent platform bases and ...</msg>
<status status="PASS" starttime="20240415 12:31:05.998" endtime="20240415 12:31:06.024"/>
</kw>
<status status="PASS" starttime="20240415 12:31:05.998" endtime="20240415 12:31:06.024"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:31:06.024" endtime="20240415 12:31:06.024"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:31:06.024" endtime="20240415 12:31:06.024"/>
</branch>
<status status="PASS" starttime="20240415 12:31:05.998" endtime="20240415 12:31:06.024"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:31:06.046" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:31:06.025" endtime="20240415 12:31:06.050"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:31:06.050" endtime="20240415 12:31:07.035"/>
</kw>
<status status="PASS" starttime="20240415 12:30:34.922" endtime="20240415 12:31:07.035"/>
</iter>
<iter>
<var name="${index}">6</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:31:07.036" level="INFO">${TitleElement} = (//a[@class="title"])[6]</msg>
<status status="PASS" starttime="20240415 12:31:07.035" endtime="20240415 12:31:07.036"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:31:07.036" endtime="20240415 12:31:07.179"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:31:07.180" level="INFO">Clicking element '(//a[@class="title"])[6]'.</msg>
<status status="PASS" starttime="20240415 12:31:07.179" endtime="20240415 12:31:38.251"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:31:38.252" endtime="20240415 12:31:38.308"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:31:38.336" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:31:38.309" endtime="20240415 12:31:38.336"/>
</kw>
<msg timestamp="20240415 12:31:38.336" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:31:38.308" endtime="20240415 12:31:38.336"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:31:38.362" level="INFO">${abstractTxt} = This paper discusses the considerations that have played a role in the design of the language POOL2. This language integrates the structuring techniques of object-oriented programming with mechanisms ...</msg>
<status status="PASS" starttime="20240415 12:31:38.336" endtime="20240415 12:31:38.362"/>
</kw>
<status status="PASS" starttime="20240415 12:31:38.336" endtime="20240415 12:31:38.362"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:31:38.362" endtime="20240415 12:31:38.362"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:31:38.362" endtime="20240415 12:31:38.362"/>
</branch>
<status status="PASS" starttime="20240415 12:31:38.336" endtime="20240415 12:31:38.362"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:31:38.385" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:31:38.362" endtime="20240415 12:31:38.388"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:31:38.389" endtime="20240415 12:31:39.470"/>
</kw>
<status status="PASS" starttime="20240415 12:31:07.035" endtime="20240415 12:31:39.470"/>
</iter>
<iter>
<var name="${index}">7</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:31:39.471" level="INFO">${TitleElement} = (//a[@class="title"])[7]</msg>
<status status="PASS" starttime="20240415 12:31:39.471" endtime="20240415 12:31:39.471"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:31:39.472" endtime="20240415 12:31:39.555"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:31:39.556" level="INFO">Clicking element '(//a[@class="title"])[7]'.</msg>
<status status="PASS" starttime="20240415 12:31:39.555" endtime="20240415 12:32:01.755"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:32:01.755" endtime="20240415 12:32:01.800"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:32:01.829" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:32:01.801" endtime="20240415 12:32:01.829"/>
</kw>
<msg timestamp="20240415 12:32:01.829" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:32:01.801" endtime="20240415 12:32:01.829"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:32:01.852" level="INFO">${abstractTxt} = Complex variable-structure systems (CVSSs) are a common type of complex systems that exhibit changes both at structural and behavior levels. Simulations of CVSSs challenge current collaborative execut...</msg>
<status status="PASS" starttime="20240415 12:32:01.830" endtime="20240415 12:32:01.853"/>
</kw>
<status status="PASS" starttime="20240415 12:32:01.830" endtime="20240415 12:32:01.853"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:32:01.853" endtime="20240415 12:32:01.853"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:32:01.853" endtime="20240415 12:32:01.853"/>
</branch>
<status status="PASS" starttime="20240415 12:32:01.830" endtime="20240415 12:32:01.853"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:32:01.874" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:32:01.853" endtime="20240415 12:32:01.878"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:32:01.878" endtime="20240415 12:32:02.740"/>
</kw>
<status status="PASS" starttime="20240415 12:31:39.471" endtime="20240415 12:32:02.741"/>
</iter>
<iter>
<var name="${index}">8</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:32:02.742" level="INFO">${TitleElement} = (//a[@class="title"])[8]</msg>
<status status="PASS" starttime="20240415 12:32:02.741" endtime="20240415 12:32:02.742"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:32:02.742" endtime="20240415 12:32:02.853"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:32:02.854" level="INFO">Clicking element '(//a[@class="title"])[8]'.</msg>
<status status="PASS" starttime="20240415 12:32:02.853" endtime="20240415 12:32:25.255"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:32:25.255" endtime="20240415 12:32:25.314"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:32:25.348" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:32:25.315" endtime="20240415 12:32:25.349"/>
</kw>
<msg timestamp="20240415 12:32:25.349" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:32:25.314" endtime="20240415 12:32:25.349"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:32:25.372" level="INFO">${abstractTxt} = Data centers are major contributors to the emission of carbon dioxide to the atmosphere, and this contribution is expected to increase in the following years. This has encouraged the development of te...</msg>
<status status="PASS" starttime="20240415 12:32:25.349" endtime="20240415 12:32:25.372"/>
</kw>
<status status="PASS" starttime="20240415 12:32:25.349" endtime="20240415 12:32:25.372"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:32:25.372" endtime="20240415 12:32:25.372"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:32:25.372" endtime="20240415 12:32:25.372"/>
</branch>
<status status="PASS" starttime="20240415 12:32:25.349" endtime="20240415 12:32:25.372"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:32:25.393" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:32:25.372" endtime="20240415 12:32:25.393"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:32:25.393" endtime="20240415 12:32:26.342"/>
</kw>
<status status="PASS" starttime="20240415 12:32:02.741" endtime="20240415 12:32:26.342"/>
</iter>
<iter>
<var name="${index}">9</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:32:26.343" level="INFO">${TitleElement} = (//a[@class="title"])[9]</msg>
<status status="PASS" starttime="20240415 12:32:26.342" endtime="20240415 12:32:26.343"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:32:26.343" endtime="20240415 12:32:26.484"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:32:26.485" level="INFO">Clicking element '(//a[@class="title"])[9]'.</msg>
<status status="PASS" starttime="20240415 12:32:26.485" endtime="20240415 12:32:49.012"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:32:49.013" endtime="20240415 12:32:49.043"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:32:49.074" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:32:49.043" endtime="20240415 12:32:49.074"/>
</kw>
<msg timestamp="20240415 12:32:49.074" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:32:49.043" endtime="20240415 12:32:49.074"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:32:49.101" level="INFO">${abstractTxt} = The past 10 years has seen an explosion of interest for the area of science and technology labelled “nanotechnology.” Although at an early stage, nanotechnology is providing a space for the creation o...</msg>
<status status="PASS" starttime="20240415 12:32:49.075" endtime="20240415 12:32:49.101"/>
</kw>
<status status="PASS" starttime="20240415 12:32:49.074" endtime="20240415 12:32:49.101"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:32:49.101" endtime="20240415 12:32:49.101"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:32:49.101" endtime="20240415 12:32:49.101"/>
</branch>
<status status="PASS" starttime="20240415 12:32:49.074" endtime="20240415 12:32:49.101"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:32:49.123" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:32:49.101" endtime="20240415 12:32:49.127"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:32:49.127" endtime="20240415 12:32:50.166"/>
</kw>
<status status="PASS" starttime="20240415 12:32:26.342" endtime="20240415 12:32:50.166"/>
</iter>
<iter>
<var name="${index}">10</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:32:50.167" level="INFO">${TitleElement} = (//a[@class="title"])[10]</msg>
<status status="PASS" starttime="20240415 12:32:50.166" endtime="20240415 12:32:50.167"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:32:50.167" endtime="20240415 12:32:50.254"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:32:50.255" level="INFO">Clicking element '(//a[@class="title"])[10]'.</msg>
<status status="PASS" starttime="20240415 12:32:50.254" endtime="20240415 12:33:13.038"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:33:13.039" endtime="20240415 12:33:13.091"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:33:13.131" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:33:13.091" endtime="20240415 12:33:13.132"/>
</kw>
<msg timestamp="20240415 12:33:13.132" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:33:13.091" endtime="20240415 12:33:13.132"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:33:13.158" level="INFO">${abstractTxt} = The Quantified Constraint Satisfaction Problem (QCSP) extends classical CSP in a way which allows reasoning about uncertainty. In this paper I present novel algorithms for solving QCSP. Firstly I pres...</msg>
<status status="PASS" starttime="20240415 12:33:13.132" endtime="20240415 12:33:13.158"/>
</kw>
<status status="PASS" starttime="20240415 12:33:13.132" endtime="20240415 12:33:13.158"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:33:13.159" endtime="20240415 12:33:13.159"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:33:13.158" endtime="20240415 12:33:13.159"/>
</branch>
<status status="PASS" starttime="20240415 12:33:13.132" endtime="20240415 12:33:13.159"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:33:13.179" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:33:13.159" endtime="20240415 12:33:13.179"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:33:13.179" endtime="20240415 12:33:14.098"/>
</kw>
<status status="PASS" starttime="20240415 12:32:50.166" endtime="20240415 12:33:14.098"/>
</iter>
<iter>
<var name="${index}">11</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:33:14.099" level="INFO">${TitleElement} = (//a[@class="title"])[11]</msg>
<status status="PASS" starttime="20240415 12:33:14.099" endtime="20240415 12:33:14.099"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:33:14.099" endtime="20240415 12:33:14.236"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:33:14.238" level="INFO">Clicking element '(//a[@class="title"])[11]'.</msg>
<status status="PASS" starttime="20240415 12:33:14.237" endtime="20240415 12:33:37.108"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:33:37.109" endtime="20240415 12:33:37.161"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:33:37.193" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:33:37.161" endtime="20240415 12:33:37.193"/>
</kw>
<msg timestamp="20240415 12:33:37.193" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:33:37.161" endtime="20240415 12:33:37.193"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:33:37.218" level="INFO">${abstractTxt} = An elementary correctness proof for Ben-Ari's algorithm (1984) for incremental garbage collection is given. We give a new algorithm for systems in which there are multiple mutators and a proof of its ...</msg>
<status status="PASS" starttime="20240415 12:33:37.194" endtime="20240415 12:33:37.218"/>
</kw>
<status status="PASS" starttime="20240415 12:33:37.193" endtime="20240415 12:33:37.218"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:33:37.218" endtime="20240415 12:33:37.218"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:33:37.218" endtime="20240415 12:33:37.218"/>
</branch>
<status status="PASS" starttime="20240415 12:33:37.193" endtime="20240415 12:33:37.218"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:33:37.231" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:33:37.218" endtime="20240415 12:33:37.246"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:33:37.246" endtime="20240415 12:33:38.179"/>
</kw>
<status status="PASS" starttime="20240415 12:33:14.099" endtime="20240415 12:33:38.179"/>
</iter>
<iter>
<var name="${index}">12</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:33:38.180" level="INFO">${TitleElement} = (//a[@class="title"])[12]</msg>
<status status="PASS" starttime="20240415 12:33:38.180" endtime="20240415 12:33:38.180"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:33:38.181" endtime="20240415 12:33:38.243"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:33:38.245" level="INFO">Clicking element '(//a[@class="title"])[12]'.</msg>
<status status="PASS" starttime="20240415 12:33:38.244" endtime="20240415 12:34:20.058"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:34:20.059" endtime="20240415 12:34:20.090"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:34:20.130" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:34:20.098" endtime="20240415 12:34:20.130"/>
</kw>
<msg timestamp="20240415 12:34:20.130" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:34:20.090" endtime="20240415 12:34:20.130"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:34:20.159" level="INFO">${abstractTxt} = We present the design and implementation of a parallel algorithm for computing Gröbner bases on distributed memory multiprocessors. The parallel algorithm is irregular both in space and time: the data...</msg>
<status status="PASS" starttime="20240415 12:34:20.130" endtime="20240415 12:34:20.159"/>
</kw>
<status status="PASS" starttime="20240415 12:34:20.130" endtime="20240415 12:34:20.159"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:34:20.159" endtime="20240415 12:34:20.159"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:34:20.159" endtime="20240415 12:34:20.159"/>
</branch>
<status status="PASS" starttime="20240415 12:34:20.130" endtime="20240415 12:34:20.159"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:34:21.073" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:34:20.159" endtime="20240415 12:34:21.087"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:34:21.088" endtime="20240415 12:34:22.462"/>
</kw>
<status status="PASS" starttime="20240415 12:33:38.179" endtime="20240415 12:34:22.462"/>
</iter>
<iter>
<var name="${index}">13</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:34:22.463" level="INFO">${TitleElement} = (//a[@class="title"])[13]</msg>
<status status="PASS" starttime="20240415 12:34:22.463" endtime="20240415 12:34:22.463"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:34:22.463" endtime="20240415 12:34:22.523"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:34:22.524" level="INFO">Clicking element '(//a[@class="title"])[13]'.</msg>
<status status="PASS" starttime="20240415 12:34:22.523" endtime="20240415 12:34:45.061"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:34:45.061" endtime="20240415 12:34:45.116"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:34:45.144" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:34:45.117" endtime="20240415 12:34:45.144"/>
</kw>
<msg timestamp="20240415 12:34:45.144" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:34:45.117" endtime="20240415 12:34:45.144"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:34:45.169" level="INFO">${abstractTxt} = We study the behavior of Range Voting and Normalized Range Voting with respect to electoral control. Electoral control encompasses attempts from an election chair to alter the participation or structu...</msg>
<status status="PASS" starttime="20240415 12:34:45.144" endtime="20240415 12:34:45.169"/>
</kw>
<status status="PASS" starttime="20240415 12:34:45.144" endtime="20240415 12:34:45.169"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:34:45.169" endtime="20240415 12:34:45.169"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:34:45.169" endtime="20240415 12:34:45.169"/>
</branch>
<status status="PASS" starttime="20240415 12:34:45.144" endtime="20240415 12:34:45.169"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:34:45.201" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:34:45.170" endtime="20240415 12:34:45.201"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:34:45.201" endtime="20240415 12:34:46.121"/>
</kw>
<status status="PASS" starttime="20240415 12:34:22.463" endtime="20240415 12:34:46.121"/>
</iter>
<iter>
<var name="${index}">14</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:34:46.122" level="INFO">${TitleElement} = (//a[@class="title"])[14]</msg>
<status status="PASS" starttime="20240415 12:34:46.121" endtime="20240415 12:34:46.122"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:34:46.122" endtime="20240415 12:34:46.219"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:34:46.220" level="INFO">Clicking element '(//a[@class="title"])[14]'.</msg>
<status status="PASS" starttime="20240415 12:34:46.219" endtime="20240415 12:35:08.627"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:35:08.627" endtime="20240415 12:35:08.666"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:35:08.707" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:35:08.666" endtime="20240415 12:35:08.707"/>
</kw>
<msg timestamp="20240415 12:35:08.707" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:35:08.666" endtime="20240415 12:35:08.707"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:35:08.733" level="INFO">${abstractTxt} = A priority inversion occurs when a low-priority task causes the execution of a higher-priority task to be delayed. The possibility of priority inversions complicates the analysis of systems that use p...</msg>
<status status="PASS" starttime="20240415 12:35:08.708" endtime="20240415 12:35:08.733"/>
</kw>
<status status="PASS" starttime="20240415 12:35:08.707" endtime="20240415 12:35:08.733"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:35:08.733" endtime="20240415 12:35:08.733"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:35:08.733" endtime="20240415 12:35:08.733"/>
</branch>
<status status="PASS" starttime="20240415 12:35:08.707" endtime="20240415 12:35:08.733"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:35:08.753" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:35:08.733" endtime="20240415 12:35:08.753"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:35:08.753" endtime="20240415 12:35:09.854"/>
</kw>
<status status="PASS" starttime="20240415 12:34:46.121" endtime="20240415 12:35:09.854"/>
</iter>
<iter>
<var name="${index}">15</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:35:09.855" level="INFO">${TitleElement} = (//a[@class="title"])[15]</msg>
<status status="PASS" starttime="20240415 12:35:09.855" endtime="20240415 12:35:09.855"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:35:09.855" endtime="20240415 12:35:09.942"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:35:09.943" level="INFO">Clicking element '(//a[@class="title"])[15]'.</msg>
<status status="PASS" starttime="20240415 12:35:09.942" endtime="20240415 12:35:33.568"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:35:33.569" endtime="20240415 12:35:33.628"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:35:33.658" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:35:33.628" endtime="20240415 12:35:33.658"/>
</kw>
<msg timestamp="20240415 12:35:33.658" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:35:33.628" endtime="20240415 12:35:33.658"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:35:33.687" level="INFO">${abstractTxt} = In general computing systems, a job (process/task) may suspend itself whilst it is waiting for some activity to complete, e.g., an accelerator to return data. In real-time systems, such self-suspensio...</msg>
<status status="PASS" starttime="20240415 12:35:33.659" endtime="20240415 12:35:33.687"/>
</kw>
<status status="PASS" starttime="20240415 12:35:33.658" endtime="20240415 12:35:33.687"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:35:33.687" endtime="20240415 12:35:33.687"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:35:33.687" endtime="20240415 12:35:33.687"/>
</branch>
<status status="PASS" starttime="20240415 12:35:33.658" endtime="20240415 12:35:33.687"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:35:33.707" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:35:33.687" endtime="20240415 12:35:33.714"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:35:33.715" endtime="20240415 12:35:34.537"/>
</kw>
<status status="PASS" starttime="20240415 12:35:09.854" endtime="20240415 12:35:34.537"/>
</iter>
<iter>
<var name="${index}">16</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:35:34.538" level="INFO">${TitleElement} = (//a[@class="title"])[16]</msg>
<status status="PASS" starttime="20240415 12:35:34.538" endtime="20240415 12:35:34.538"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:35:34.539" endtime="20240415 12:35:34.670"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:35:34.672" level="INFO">Clicking element '(//a[@class="title"])[16]'.</msg>
<status status="PASS" starttime="20240415 12:35:34.670" endtime="20240415 12:35:56.967"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:35:56.967" endtime="20240415 12:35:57.004"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:35:57.058" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:35:57.004" endtime="20240415 12:35:57.058"/>
</kw>
<msg timestamp="20240415 12:35:57.058" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:35:57.004" endtime="20240415 12:35:57.058"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:35:57.091" level="INFO">${abstractTxt} = We propose a novel distributed algorithm for the minimum cut problem. Motivated by applications like volumetric segmentation in computer vision, we aim at solving large sparse problems. When the probl...</msg>
<status status="PASS" starttime="20240415 12:35:57.059" endtime="20240415 12:35:57.091"/>
</kw>
<status status="PASS" starttime="20240415 12:35:57.058" endtime="20240415 12:35:57.091"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:35:57.091" endtime="20240415 12:35:57.091"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:35:57.091" endtime="20240415 12:35:57.091"/>
</branch>
<status status="PASS" starttime="20240415 12:35:57.058" endtime="20240415 12:35:57.091"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:35:57.114" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:35:57.091" endtime="20240415 12:35:57.118"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:35:57.118" endtime="20240415 12:35:58.281"/>
</kw>
<status status="PASS" starttime="20240415 12:35:34.537" endtime="20240415 12:35:58.281"/>
</iter>
<iter>
<var name="${index}">17</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:35:58.282" level="INFO">${TitleElement} = (//a[@class="title"])[17]</msg>
<status status="PASS" starttime="20240415 12:35:58.281" endtime="20240415 12:35:58.283"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:35:58.283" endtime="20240415 12:35:58.333"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:35:58.334" level="INFO">Clicking element '(//a[@class="title"])[17]'.</msg>
<status status="PASS" starttime="20240415 12:35:58.333" endtime="20240415 12:36:20.522"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:36:20.522" endtime="20240415 12:36:20.579"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:36:20.704" level="INFO" html="true">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="selenium-screenshot-18.png"&gt;&lt;img src="selenium-screenshot-18.png" width="800px"&gt;&lt;/a&gt;</msg>
<msg timestamp="20240415 12:36:20.704" level="FAIL">Element with locator '//*[@id="Abs1-content"]/p' not found.</msg>
<status status="FAIL" starttime="20240415 12:36:20.580" endtime="20240415 12:36:20.704"/>
</kw>
<msg timestamp="20240415 12:36:20.704" level="INFO">${FirstType} = False</msg>
<status status="PASS" starttime="20240415 12:36:20.580" endtime="20240415 12:36:20.704"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:36:20.704" endtime="20240415 12:36:20.704"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:36:20.704" endtime="20240415 12:36:20.704"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:36:20.734" level="INFO">${abstractTxt} = This paper is concerned with the design of online scheduling algorithms that exploit extra resources. In particular, it studies how to make use of multiple processors to counteract the lack of future ...</msg>
<status status="PASS" starttime="20240415 12:36:20.704" endtime="20240415 12:36:20.734"/>
</kw>
<status status="PASS" starttime="20240415 12:36:20.704" endtime="20240415 12:36:20.734"/>
</branch>
<status status="PASS" starttime="20240415 12:36:20.704" endtime="20240415 12:36:20.734"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:36:20.749" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:36:20.734" endtime="20240415 12:36:20.768"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:36:20.768" endtime="20240415 12:36:21.662"/>
</kw>
<status status="PASS" starttime="20240415 12:35:58.281" endtime="20240415 12:36:21.663"/>
</iter>
<iter>
<var name="${index}">18</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:36:21.664" level="INFO">${TitleElement} = (//a[@class="title"])[18]</msg>
<status status="PASS" starttime="20240415 12:36:21.663" endtime="20240415 12:36:21.664"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:36:21.664" endtime="20240415 12:36:21.822"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:36:21.823" level="INFO">Clicking element '(//a[@class="title"])[18]'.</msg>
<status status="PASS" starttime="20240415 12:36:21.822" endtime="20240415 12:36:42.836"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:36:42.836" endtime="20240415 12:36:42.886"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:36:42.915" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:36:42.886" endtime="20240415 12:36:42.915"/>
</kw>
<msg timestamp="20240415 12:36:42.915" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:36:42.886" endtime="20240415 12:36:42.915"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:36:42.941" level="INFO">${abstractTxt} = We present a technique for analyzing the number of cache misses incurred by multithreaded cache oblivious algorithms on an idealized parallel machine in which each processor has a private cache. We sp...</msg>
<status status="PASS" starttime="20240415 12:36:42.915" endtime="20240415 12:36:42.941"/>
</kw>
<status status="PASS" starttime="20240415 12:36:42.915" endtime="20240415 12:36:42.941"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:36:42.941" endtime="20240415 12:36:42.942"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:36:42.941" endtime="20240415 12:36:42.942"/>
</branch>
<status status="PASS" starttime="20240415 12:36:42.915" endtime="20240415 12:36:42.942"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:36:42.963" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:36:42.942" endtime="20240415 12:36:42.980"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:36:42.980" endtime="20240415 12:36:43.921"/>
</kw>
<status status="PASS" starttime="20240415 12:36:21.663" endtime="20240415 12:36:43.921"/>
</iter>
<iter>
<var name="${index}">19</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:36:43.922" level="INFO">${TitleElement} = (//a[@class="title"])[19]</msg>
<status status="PASS" starttime="20240415 12:36:43.922" endtime="20240415 12:36:43.922"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:36:43.923" endtime="20240415 12:36:44.045"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:36:44.046" level="INFO">Clicking element '(//a[@class="title"])[19]'.</msg>
<status status="PASS" starttime="20240415 12:36:44.045" endtime="20240415 12:37:35.280"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:37:35.280" endtime="20240415 12:37:35.337"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:37:35.373" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:37:35.338" endtime="20240415 12:37:35.373"/>
</kw>
<msg timestamp="20240415 12:37:35.374" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:37:35.338" endtime="20240415 12:37:35.374"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:37:35.403" level="INFO">${abstractTxt} = Parallelizing (compute-intensive) discrete event simulation (DES) applications is a classical approach for speeding up their execution and for making very large/complex simulation models tractable. Th...</msg>
<status status="PASS" starttime="20240415 12:37:35.374" endtime="20240415 12:37:35.403"/>
</kw>
<status status="PASS" starttime="20240415 12:37:35.374" endtime="20240415 12:37:35.403"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:37:35.403" endtime="20240415 12:37:35.403"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:37:35.403" endtime="20240415 12:37:35.403"/>
</branch>
<status status="PASS" starttime="20240415 12:37:35.374" endtime="20240415 12:37:35.403"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:37:35.425" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:37:35.404" endtime="20240415 12:37:35.430"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:37:35.430" endtime="20240415 12:37:36.542"/>
</kw>
<status status="PASS" starttime="20240415 12:36:43.921" endtime="20240415 12:37:36.542"/>
</iter>
<status status="PASS" starttime="20240415 12:28:13.657" endtime="20240415 12:37:36.542"/>
</for>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${nextBTN}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:37:36.544" level="INFO">Clicking element '//*[@id="kb-nav--main"]/div[4]/form/a/img'.</msg>
<status status="PASS" starttime="20240415 12:37:36.543" endtime="20240415 12:37:38.378"/>
</kw>
<status status="PASS" starttime="20240415 12:28:13.597" endtime="20240415 12:37:38.379"/>
</iter>
<iter>
<var name="${page}">4</var>
<kw name="Get Element Count" library="SeleniumLibrary">
<var>${NumOfTitleInPage}</var>
<arg>${title}</arg>
<doc>Returns the number of elements matching ``locator``.</doc>
<msg timestamp="20240415 12:37:38.474" level="INFO">${NumOfTitleInPage} = 20</msg>
<status status="PASS" starttime="20240415 12:37:38.379" endtime="20240415 12:37:38.474"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>1</value>
<value>${NumOfTitleInPage}</value>
<iter>
<var name="${index}">1</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:37:38.475" level="INFO">${TitleElement} = (//a[@class="title"])[1]</msg>
<status status="PASS" starttime="20240415 12:37:38.474" endtime="20240415 12:37:38.475"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:37:38.475" endtime="20240415 12:37:38.503"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:37:38.504" level="INFO">Clicking element '(//a[@class="title"])[1]'.</msg>
<status status="PASS" starttime="20240415 12:37:38.503" endtime="20240415 12:38:09.477"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:38:09.478" endtime="20240415 12:38:09.513"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:38:09.545" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:38:09.514" endtime="20240415 12:38:09.546"/>
</kw>
<msg timestamp="20240415 12:38:09.546" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:38:09.514" endtime="20240415 12:38:09.546"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:38:09.577" level="INFO">${abstractTxt} = Blockchain-based consensus methods such as PoW (Proof of Work) and PoS (Proof of Stake) are widely used and favored these days, but each has disadvantages. One of the significant issues PoW encountere...</msg>
<status status="PASS" starttime="20240415 12:38:09.547" endtime="20240415 12:38:09.577"/>
</kw>
<status status="PASS" starttime="20240415 12:38:09.546" endtime="20240415 12:38:09.578"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:38:09.578" endtime="20240415 12:38:09.578"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:38:09.578" endtime="20240415 12:38:09.578"/>
</branch>
<status status="PASS" starttime="20240415 12:38:09.546" endtime="20240415 12:38:09.578"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:38:09.595" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:38:09.578" endtime="20240415 12:38:09.603"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:38:09.604" endtime="20240415 12:38:10.611"/>
</kw>
<status status="PASS" starttime="20240415 12:37:38.474" endtime="20240415 12:38:10.611"/>
</iter>
<iter>
<var name="${index}">2</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:38:10.612" level="INFO">${TitleElement} = (//a[@class="title"])[2]</msg>
<status status="PASS" starttime="20240415 12:38:10.611" endtime="20240415 12:38:10.612"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:38:10.612" endtime="20240415 12:38:10.725"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:38:10.726" level="INFO">Clicking element '(//a[@class="title"])[2]'.</msg>
<status status="PASS" starttime="20240415 12:38:10.725" endtime="20240415 12:38:33.024"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:38:33.025" endtime="20240415 12:38:33.096"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:38:33.127" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:38:33.097" endtime="20240415 12:38:33.127"/>
</kw>
<msg timestamp="20240415 12:38:33.127" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:38:33.097" endtime="20240415 12:38:33.127"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:38:33.153" level="INFO">${abstractTxt} = To analyze the research impact of the researcher, different bibliographic databases like Scopus, Web of Science, Google Scholar, etc. are accessed for evaluating the trend of publications and citation...</msg>
<status status="PASS" starttime="20240415 12:38:33.127" endtime="20240415 12:38:33.153"/>
</kw>
<status status="PASS" starttime="20240415 12:38:33.127" endtime="20240415 12:38:33.153"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:38:33.155" endtime="20240415 12:38:33.155"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:38:33.153" endtime="20240415 12:38:33.155"/>
</branch>
<status status="PASS" starttime="20240415 12:38:33.127" endtime="20240415 12:38:33.155"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:38:33.208" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:38:33.155" endtime="20240415 12:38:33.227"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:38:33.227" endtime="20240415 12:38:34.243"/>
</kw>
<status status="PASS" starttime="20240415 12:38:10.611" endtime="20240415 12:38:34.243"/>
</iter>
<iter>
<var name="${index}">3</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:38:34.244" level="INFO">${TitleElement} = (//a[@class="title"])[3]</msg>
<status status="PASS" starttime="20240415 12:38:34.243" endtime="20240415 12:38:34.244"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:38:34.244" endtime="20240415 12:38:34.368"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:38:34.369" level="INFO">Clicking element '(//a[@class="title"])[3]'.</msg>
<status status="PASS" starttime="20240415 12:38:34.368" endtime="20240415 12:39:15.665"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:39:15.665" endtime="20240415 12:39:15.704"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:39:15.737" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:39:15.704" endtime="20240415 12:39:15.737"/>
</kw>
<msg timestamp="20240415 12:39:15.737" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:39:15.704" endtime="20240415 12:39:15.737"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:39:15.782" level="INFO">${abstractTxt} = Decentralization for data storage is a challenging problem for blockchain-based solutions as the blocksize plays a key role for scalability. In addition, specific requirements of multimedia data call ...</msg>
<status status="PASS" starttime="20240415 12:39:15.737" endtime="20240415 12:39:15.782"/>
</kw>
<status status="PASS" starttime="20240415 12:39:15.737" endtime="20240415 12:39:15.782"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:39:15.782" endtime="20240415 12:39:15.783"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:39:15.782" endtime="20240415 12:39:15.783"/>
</branch>
<status status="PASS" starttime="20240415 12:39:15.737" endtime="20240415 12:39:15.783"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:39:15.878" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:39:15.783" endtime="20240415 12:39:15.883"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:39:15.884" endtime="20240415 12:39:16.985"/>
</kw>
<status status="PASS" starttime="20240415 12:38:34.243" endtime="20240415 12:39:16.985"/>
</iter>
<iter>
<var name="${index}">4</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:39:16.987" level="INFO">${TitleElement} = (//a[@class="title"])[4]</msg>
<status status="PASS" starttime="20240415 12:39:16.986" endtime="20240415 12:39:16.987"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:39:16.987" endtime="20240415 12:39:17.077"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:39:17.078" level="INFO">Clicking element '(//a[@class="title"])[4]'.</msg>
<status status="PASS" starttime="20240415 12:39:17.077" endtime="20240415 12:39:39.796"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:39:39.796" endtime="20240415 12:39:39.845"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:39:39.872" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:39:39.845" endtime="20240415 12:39:39.872"/>
</kw>
<msg timestamp="20240415 12:39:39.873" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:39:39.845" endtime="20240415 12:39:39.873"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:39:39.896" level="INFO">${abstractTxt} = Blockchain networks have attracted tremendous attention for creating cryptocurrencies and decentralized economies built on peer-to-peer protocols. However, the complex nature of the dynamics and feedb...</msg>
<status status="PASS" starttime="20240415 12:39:39.873" endtime="20240415 12:39:39.896"/>
</kw>
<status status="PASS" starttime="20240415 12:39:39.873" endtime="20240415 12:39:39.896"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:39:39.896" endtime="20240415 12:39:39.897"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:39:39.896" endtime="20240415 12:39:39.897"/>
</branch>
<status status="PASS" starttime="20240415 12:39:39.873" endtime="20240415 12:39:39.897"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:39:39.918" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:39:39.897" endtime="20240415 12:39:39.918"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:39:39.918" endtime="20240415 12:39:40.813"/>
</kw>
<status status="PASS" starttime="20240415 12:39:16.986" endtime="20240415 12:39:40.814"/>
</iter>
<iter>
<var name="${index}">5</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:39:40.814" level="INFO">${TitleElement} = (//a[@class="title"])[5]</msg>
<status status="PASS" starttime="20240415 12:39:40.814" endtime="20240415 12:39:40.814"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:39:40.815" endtime="20240415 12:39:40.946"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:39:40.947" level="INFO">Clicking element '(//a[@class="title"])[5]'.</msg>
<status status="PASS" starttime="20240415 12:39:40.946" endtime="20240415 12:40:03.394"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:40:03.394" endtime="20240415 12:40:03.432"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:40:03.459" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:40:03.433" endtime="20240415 12:40:03.459"/>
</kw>
<msg timestamp="20240415 12:40:03.459" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:40:03.432" endtime="20240415 12:40:03.460"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:40:03.483" level="INFO">${abstractTxt} = In Web 2.0-based social networks, users suffer from authorities of service providers and politicians, such as revoking users, removing content, and selling users’ sensitive information. The concept of...</msg>
<status status="PASS" starttime="20240415 12:40:03.460" endtime="20240415 12:40:03.483"/>
</kw>
<status status="PASS" starttime="20240415 12:40:03.460" endtime="20240415 12:40:03.484"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:40:03.484" endtime="20240415 12:40:03.484"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:40:03.484" endtime="20240415 12:40:03.484"/>
</branch>
<status status="PASS" starttime="20240415 12:40:03.460" endtime="20240415 12:40:03.484"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:40:03.503" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:40:03.484" endtime="20240415 12:40:03.507"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:40:03.507" endtime="20240415 12:40:04.570"/>
</kw>
<status status="PASS" starttime="20240415 12:39:40.814" endtime="20240415 12:40:04.570"/>
</iter>
<iter>
<var name="${index}">6</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:40:04.571" level="INFO">${TitleElement} = (//a[@class="title"])[6]</msg>
<status status="PASS" starttime="20240415 12:40:04.571" endtime="20240415 12:40:04.571"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:40:04.571" endtime="20240415 12:40:04.605"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:40:04.606" level="INFO">Clicking element '(//a[@class="title"])[6]'.</msg>
<status status="PASS" starttime="20240415 12:40:04.605" endtime="20240415 12:40:26.888"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:40:26.888" endtime="20240415 12:40:26.932"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:40:26.959" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:40:26.932" endtime="20240415 12:40:26.959"/>
</kw>
<msg timestamp="20240415 12:40:26.959" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:40:26.932" endtime="20240415 12:40:26.959"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:40:26.983" level="INFO">${abstractTxt} = Nowadays enterprises implement blockchain technology in various industries, including finance, logistics, and other sectors. While the core idea behind blockchain is to decentralize storage, enterpris...</msg>
<status status="PASS" starttime="20240415 12:40:26.959" endtime="20240415 12:40:26.983"/>
</kw>
<status status="PASS" starttime="20240415 12:40:26.959" endtime="20240415 12:40:26.983"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:40:26.983" endtime="20240415 12:40:26.983"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:40:26.983" endtime="20240415 12:40:26.983"/>
</branch>
<status status="PASS" starttime="20240415 12:40:26.959" endtime="20240415 12:40:26.983"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:40:27.006" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:40:26.983" endtime="20240415 12:40:27.010"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:40:27.010" endtime="20240415 12:40:27.980"/>
</kw>
<status status="PASS" starttime="20240415 12:40:04.570" endtime="20240415 12:40:27.980"/>
</iter>
<iter>
<var name="${index}">7</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:40:27.981" level="INFO">${TitleElement} = (//a[@class="title"])[7]</msg>
<status status="PASS" starttime="20240415 12:40:27.980" endtime="20240415 12:40:27.981"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:40:27.982" endtime="20240415 12:40:28.110"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:40:28.111" level="INFO">Clicking element '(//a[@class="title"])[7]'.</msg>
<status status="PASS" starttime="20240415 12:40:28.110" endtime="20240415 12:40:50.563"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:40:50.564" endtime="20240415 12:40:50.661"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:40:50.691" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:40:50.662" endtime="20240415 12:40:50.691"/>
</kw>
<msg timestamp="20240415 12:40:50.691" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:40:50.662" endtime="20240415 12:40:50.691"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:40:50.717" level="INFO">${abstractTxt} = Large scale distributed databases are designed to support commercial and cloud based applications. The minimal expectation from such systems is that they ensure consistency and reliability in case of ...</msg>
<status status="PASS" starttime="20240415 12:40:50.691" endtime="20240415 12:40:50.717"/>
</kw>
<status status="PASS" starttime="20240415 12:40:50.691" endtime="20240415 12:40:50.717"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:40:50.717" endtime="20240415 12:40:50.717"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:40:50.717" endtime="20240415 12:40:50.717"/>
</branch>
<status status="PASS" starttime="20240415 12:40:50.691" endtime="20240415 12:40:50.717"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:40:50.730" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:40:50.717" endtime="20240415 12:40:50.745"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:40:50.745" endtime="20240415 12:40:51.779"/>
</kw>
<status status="PASS" starttime="20240415 12:40:27.980" endtime="20240415 12:40:51.779"/>
</iter>
<iter>
<var name="${index}">8</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:40:51.780" level="INFO">${TitleElement} = (//a[@class="title"])[8]</msg>
<status status="PASS" starttime="20240415 12:40:51.779" endtime="20240415 12:40:51.780"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:40:51.780" endtime="20240415 12:40:51.914"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:40:51.915" level="INFO">Clicking element '(//a[@class="title"])[8]'.</msg>
<status status="PASS" starttime="20240415 12:40:51.914" endtime="20240415 12:41:14.645"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:41:14.646" endtime="20240415 12:41:14.702"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:41:14.728" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:41:14.702" endtime="20240415 12:41:14.728"/>
</kw>
<msg timestamp="20240415 12:41:14.729" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:41:14.702" endtime="20240415 12:41:14.729"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:41:14.759" level="INFO">${abstractTxt} = The present article proceeds from the mainstream view that the conceptual framework underpinning adversarial systems of criminal adjudication, i.e. a mixture of common-sense philosophy and probabilist...</msg>
<status status="PASS" starttime="20240415 12:41:14.729" endtime="20240415 12:41:14.759"/>
</kw>
<status status="PASS" starttime="20240415 12:41:14.729" endtime="20240415 12:41:14.759"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:41:14.759" endtime="20240415 12:41:14.759"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:41:14.759" endtime="20240415 12:41:14.759"/>
</branch>
<status status="PASS" starttime="20240415 12:41:14.729" endtime="20240415 12:41:14.759"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:41:14.774" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:41:14.759" endtime="20240415 12:41:14.774"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:41:14.774" endtime="20240415 12:41:15.719"/>
</kw>
<status status="PASS" starttime="20240415 12:40:51.779" endtime="20240415 12:41:15.719"/>
</iter>
<iter>
<var name="${index}">9</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:41:15.720" level="INFO">${TitleElement} = (//a[@class="title"])[9]</msg>
<status status="PASS" starttime="20240415 12:41:15.719" endtime="20240415 12:41:15.720"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:41:15.720" endtime="20240415 12:41:15.843"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:41:15.844" level="INFO">Clicking element '(//a[@class="title"])[9]'.</msg>
<status status="PASS" starttime="20240415 12:41:15.843" endtime="20240415 12:41:47.120"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:41:47.120" endtime="20240415 12:41:47.154"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:41:47.186" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:41:47.154" endtime="20240415 12:41:47.186"/>
</kw>
<msg timestamp="20240415 12:41:47.186" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:41:47.154" endtime="20240415 12:41:47.186"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:41:47.208" level="INFO">${abstractTxt} = Reaching agreement among processes sharing read/write memory is possible only in the presence of an eventual unique leader. A leader that fails must be recoverable, but on the other hand, a live and w...</msg>
<status status="PASS" starttime="20240415 12:41:47.187" endtime="20240415 12:41:47.208"/>
</kw>
<status status="PASS" starttime="20240415 12:41:47.186" endtime="20240415 12:41:47.208"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:41:47.208" endtime="20240415 12:41:47.208"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:41:47.208" endtime="20240415 12:41:47.208"/>
</branch>
<status status="PASS" starttime="20240415 12:41:47.186" endtime="20240415 12:41:47.208"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:41:47.240" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:41:47.208" endtime="20240415 12:41:47.240"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:41:47.240" endtime="20240415 12:41:48.349"/>
</kw>
<status status="PASS" starttime="20240415 12:41:15.719" endtime="20240415 12:41:48.350"/>
</iter>
<iter>
<var name="${index}">10</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:41:48.351" level="INFO">${TitleElement} = (//a[@class="title"])[10]</msg>
<status status="PASS" starttime="20240415 12:41:48.350" endtime="20240415 12:41:48.351"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:41:48.351" endtime="20240415 12:41:48.487"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:41:48.488" level="INFO">Clicking element '(//a[@class="title"])[10]'.</msg>
<status status="PASS" starttime="20240415 12:41:48.487" endtime="20240415 12:42:10.756"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:42:10.757" endtime="20240415 12:42:10.791"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:42:10.816" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:42:10.792" endtime="20240415 12:42:10.816"/>
</kw>
<msg timestamp="20240415 12:42:10.816" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:42:10.792" endtime="20240415 12:42:10.816"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:42:10.852" level="INFO">${abstractTxt} = GUI design isn't simply a matter of putting a nice front-end on a capable program. It requires thought about the way in which people might be expected to use a system, and investigation of the ways th...</msg>
<status status="PASS" starttime="20240415 12:42:10.816" endtime="20240415 12:42:10.852"/>
</kw>
<status status="PASS" starttime="20240415 12:42:10.816" endtime="20240415 12:42:10.852"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:42:10.853" endtime="20240415 12:42:10.853"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:42:10.852" endtime="20240415 12:42:10.853"/>
</branch>
<status status="PASS" starttime="20240415 12:42:10.816" endtime="20240415 12:42:10.853"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:42:10.876" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:42:10.853" endtime="20240415 12:42:10.882"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:42:10.882" endtime="20240415 12:42:11.853"/>
</kw>
<status status="PASS" starttime="20240415 12:41:48.350" endtime="20240415 12:42:11.853"/>
</iter>
<iter>
<var name="${index}">11</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:42:11.854" level="INFO">${TitleElement} = (//a[@class="title"])[11]</msg>
<status status="PASS" starttime="20240415 12:42:11.854" endtime="20240415 12:42:11.854"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:42:11.854" endtime="20240415 12:42:11.913"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:42:11.914" level="INFO">Clicking element '(//a[@class="title"])[11]'.</msg>
<status status="PASS" starttime="20240415 12:42:11.913" endtime="20240415 12:42:43.041"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:42:43.042" endtime="20240415 12:42:43.102"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:42:43.136" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:42:43.104" endtime="20240415 12:42:43.136"/>
</kw>
<msg timestamp="20240415 12:42:43.136" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:42:43.103" endtime="20240415 12:42:43.136"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:42:43.163" level="INFO">${abstractTxt} = We consider the scheduling of a sporadic real-time task system on an identical multiprocessor. Though Pfair algorithms are theoretically optimal for such task systems, in practice, their runtime overh...</msg>
<status status="PASS" starttime="20240415 12:42:43.136" endtime="20240415 12:42:43.163"/>
</kw>
<status status="PASS" starttime="20240415 12:42:43.136" endtime="20240415 12:42:43.164"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:42:43.164" endtime="20240415 12:42:43.164"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:42:43.164" endtime="20240415 12:42:43.164"/>
</branch>
<status status="PASS" starttime="20240415 12:42:43.136" endtime="20240415 12:42:43.164"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:42:43.190" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:42:43.164" endtime="20240415 12:42:43.194"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:42:43.194" endtime="20240415 12:42:44.261"/>
</kw>
<status status="PASS" starttime="20240415 12:42:11.853" endtime="20240415 12:42:44.261"/>
</iter>
<iter>
<var name="${index}">12</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:42:44.262" level="INFO">${TitleElement} = (//a[@class="title"])[12]</msg>
<status status="PASS" starttime="20240415 12:42:44.262" endtime="20240415 12:42:44.263"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:42:44.263" endtime="20240415 12:42:44.373"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:42:44.374" level="INFO">Clicking element '(//a[@class="title"])[12]'.</msg>
<status status="PASS" starttime="20240415 12:42:44.374" endtime="20240415 12:43:06.613"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:43:06.614" endtime="20240415 12:43:06.665"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:43:06.699" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:43:06.666" endtime="20240415 12:43:06.699"/>
</kw>
<msg timestamp="20240415 12:43:06.699" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:43:06.665" endtime="20240415 12:43:06.699"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:43:06.724" level="INFO">${abstractTxt} = The mathematical proof checker Mizar by Andrzej Trybulec uses a proof input language that is much more readable than the input languages of most other proof assistants. This system also differs in man...</msg>
<status status="PASS" starttime="20240415 12:43:06.700" endtime="20240415 12:43:06.724"/>
</kw>
<status status="PASS" starttime="20240415 12:43:06.700" endtime="20240415 12:43:06.724"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:43:06.724" endtime="20240415 12:43:06.725"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:43:06.724" endtime="20240415 12:43:06.725"/>
</branch>
<status status="PASS" starttime="20240415 12:43:06.700" endtime="20240415 12:43:06.725"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:43:06.747" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:43:06.725" endtime="20240415 12:43:06.751"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:43:06.751" endtime="20240415 12:43:07.758"/>
</kw>
<status status="PASS" starttime="20240415 12:42:44.261" endtime="20240415 12:43:07.758"/>
</iter>
<iter>
<var name="${index}">13</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:43:07.759" level="INFO">${TitleElement} = (//a[@class="title"])[13]</msg>
<status status="PASS" starttime="20240415 12:43:07.758" endtime="20240415 12:43:07.759"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:43:07.759" endtime="20240415 12:43:07.819"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:43:07.821" level="INFO">Clicking element '(//a[@class="title"])[13]'.</msg>
<status status="PASS" starttime="20240415 12:43:07.820" endtime="20240415 12:43:29.855"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:43:29.855" endtime="20240415 12:43:29.896"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:43:29.929" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:43:29.897" endtime="20240415 12:43:29.930"/>
</kw>
<msg timestamp="20240415 12:43:29.930" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:43:29.897" endtime="20240415 12:43:29.930"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:43:29.957" level="INFO">${abstractTxt} = A number of data-driven execution models have been proposed for parallel execution of logic programs8, 12, 9, 3) LogDf is an abstract data-driven execution model for pure logic programs3) which has sh...</msg>
<status status="PASS" starttime="20240415 12:43:29.930" endtime="20240415 12:43:29.957"/>
</kw>
<status status="PASS" starttime="20240415 12:43:29.930" endtime="20240415 12:43:29.957"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:43:29.958" endtime="20240415 12:43:29.958"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:43:29.957" endtime="20240415 12:43:29.958"/>
</branch>
<status status="PASS" starttime="20240415 12:43:29.930" endtime="20240415 12:43:29.958"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:43:29.982" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:43:29.958" endtime="20240415 12:43:29.982"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:43:29.982" endtime="20240415 12:43:30.919"/>
</kw>
<status status="PASS" starttime="20240415 12:43:07.758" endtime="20240415 12:43:30.919"/>
</iter>
<iter>
<var name="${index}">14</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:43:30.920" level="INFO">${TitleElement} = (//a[@class="title"])[14]</msg>
<status status="PASS" starttime="20240415 12:43:30.919" endtime="20240415 12:43:30.920"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:43:30.920" endtime="20240415 12:43:31.039"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:43:31.039" level="INFO">Clicking element '(//a[@class="title"])[14]'.</msg>
<status status="PASS" starttime="20240415 12:43:31.039" endtime="20240415 12:43:53.117"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:43:53.118" endtime="20240415 12:43:53.174"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:43:53.208" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:43:53.175" endtime="20240415 12:43:53.208"/>
</kw>
<msg timestamp="20240415 12:43:53.208" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:43:53.174" endtime="20240415 12:43:53.208"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:43:53.240" level="INFO">${abstractTxt} = The problem of representing a setU≜{u 1,...,u m} of read-write variables on ann-node distributed-memory parallel computer is considered. It is shown thatU can be represented among then nodes of a vari...</msg>
<status status="PASS" starttime="20240415 12:43:53.209" endtime="20240415 12:43:53.240"/>
</kw>
<status status="PASS" starttime="20240415 12:43:53.208" endtime="20240415 12:43:53.240"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:43:53.241" endtime="20240415 12:43:53.241"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:43:53.240" endtime="20240415 12:43:53.241"/>
</branch>
<status status="PASS" starttime="20240415 12:43:53.208" endtime="20240415 12:43:53.241"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:43:53.250" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:43:53.241" endtime="20240415 12:43:53.267"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:43:53.267" endtime="20240415 12:43:54.194"/>
</kw>
<status status="PASS" starttime="20240415 12:43:30.919" endtime="20240415 12:43:54.195"/>
</iter>
<iter>
<var name="${index}">15</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:43:54.196" level="INFO">${TitleElement} = (//a[@class="title"])[15]</msg>
<status status="PASS" starttime="20240415 12:43:54.195" endtime="20240415 12:43:54.196"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:43:54.196" endtime="20240415 12:43:54.329"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:43:54.330" level="INFO">Clicking element '(//a[@class="title"])[15]'.</msg>
<status status="PASS" starttime="20240415 12:43:54.329" endtime="20240415 12:44:16.777"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:44:16.777" endtime="20240415 12:44:16.839"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:44:16.869" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:44:16.840" endtime="20240415 12:44:16.869"/>
</kw>
<msg timestamp="20240415 12:44:16.869" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:44:16.839" endtime="20240415 12:44:16.869"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:44:16.893" level="INFO">${abstractTxt} = This paper presents a distributed, energy-aware method for the autonomous deployment and maintenance of battery-powered robots within a known or unknown region in 2D space. Our approach does not rely ...</msg>
<status status="PASS" starttime="20240415 12:44:16.870" endtime="20240415 12:44:16.893"/>
</kw>
<status status="PASS" starttime="20240415 12:44:16.869" endtime="20240415 12:44:16.893"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:44:16.894" endtime="20240415 12:44:16.894"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:44:16.893" endtime="20240415 12:44:16.894"/>
</branch>
<status status="PASS" starttime="20240415 12:44:16.869" endtime="20240415 12:44:16.894"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:44:16.915" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:44:16.894" endtime="20240415 12:44:16.919"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:44:16.919" endtime="20240415 12:44:17.241"/>
</kw>
<status status="PASS" starttime="20240415 12:43:54.195" endtime="20240415 12:44:17.241"/>
</iter>
<iter>
<var name="${index}">16</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:44:17.242" level="INFO">${TitleElement} = (//a[@class="title"])[16]</msg>
<status status="PASS" starttime="20240415 12:44:17.241" endtime="20240415 12:44:17.242"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:44:17.242" endtime="20240415 12:44:17.358"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:44:17.358" level="INFO">Clicking element '(//a[@class="title"])[16]'.</msg>
<status status="PASS" starttime="20240415 12:44:17.358" endtime="20240415 12:44:40.366"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:44:40.367" endtime="20240415 12:44:40.434"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:44:40.463" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:44:40.435" endtime="20240415 12:44:40.463"/>
</kw>
<msg timestamp="20240415 12:44:40.463" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:44:40.434" endtime="20240415 12:44:40.463"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:44:40.488" level="INFO">${abstractTxt} = Traversal is a fundamental procedure in most parallel graph algorithms. To explore the massive fine-grained parallelism in graph traversal, the fine-grained data synchronization is critical. On commod...</msg>
<status status="PASS" starttime="20240415 12:44:40.463" endtime="20240415 12:44:40.488"/>
</kw>
<status status="PASS" starttime="20240415 12:44:40.463" endtime="20240415 12:44:40.488"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:44:40.488" endtime="20240415 12:44:40.488"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:44:40.488" endtime="20240415 12:44:40.488"/>
</branch>
<status status="PASS" starttime="20240415 12:44:40.463" endtime="20240415 12:44:40.488"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:44:40.503" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:44:40.488" endtime="20240415 12:44:40.503"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:44:40.503" endtime="20240415 12:44:41.419"/>
</kw>
<status status="PASS" starttime="20240415 12:44:17.241" endtime="20240415 12:44:41.419"/>
</iter>
<iter>
<var name="${index}">17</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:44:41.421" level="INFO">${TitleElement} = (//a[@class="title"])[17]</msg>
<status status="PASS" starttime="20240415 12:44:41.420" endtime="20240415 12:44:41.421"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:44:41.421" endtime="20240415 12:44:41.517"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:44:41.518" level="INFO">Clicking element '(//a[@class="title"])[17]'.</msg>
<status status="PASS" starttime="20240415 12:44:41.517" endtime="20240415 12:45:04.757"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:45:04.757" endtime="20240415 12:45:04.797"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:45:04.829" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:45:04.798" endtime="20240415 12:45:04.829"/>
</kw>
<msg timestamp="20240415 12:45:04.829" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:45:04.797" endtime="20240415 12:45:04.830"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:45:04.854" level="INFO">${abstractTxt} = We introduce the recovery-oriented programming paradigm. Programs that are designed according to the recovery-oriented programming paradigm include, as an integral part, the important safety and liven...</msg>
<status status="PASS" starttime="20240415 12:45:04.830" endtime="20240415 12:45:04.855"/>
</kw>
<status status="PASS" starttime="20240415 12:45:04.830" endtime="20240415 12:45:04.855"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:45:04.855" endtime="20240415 12:45:04.855"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:45:04.855" endtime="20240415 12:45:04.855"/>
</branch>
<status status="PASS" starttime="20240415 12:45:04.830" endtime="20240415 12:45:04.855"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:45:04.877" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:45:04.855" endtime="20240415 12:45:04.881"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:45:04.881" endtime="20240415 12:45:05.803"/>
</kw>
<status status="PASS" starttime="20240415 12:44:41.420" endtime="20240415 12:45:05.803"/>
</iter>
<iter>
<var name="${index}">18</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:45:05.804" level="INFO">${TitleElement} = (//a[@class="title"])[18]</msg>
<status status="PASS" starttime="20240415 12:45:05.804" endtime="20240415 12:45:05.804"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:45:05.805" endtime="20240415 12:45:05.948"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:45:05.949" level="INFO">Clicking element '(//a[@class="title"])[18]'.</msg>
<status status="PASS" starttime="20240415 12:45:05.949" endtime="20240415 12:45:28.727"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:45:28.727" endtime="20240415 12:45:28.755"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:45:28.788" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:45:28.755" endtime="20240415 12:45:28.788"/>
</kw>
<msg timestamp="20240415 12:45:28.788" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:45:28.755" endtime="20240415 12:45:28.788"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:45:28.818" level="INFO">${abstractTxt} = A growing set of applications require access to digital video and audio. In order to provide playback of such continuous media (CM), scheduling strategies for CM data servers (CMS) are necessary. In s...</msg>
<status status="PASS" starttime="20240415 12:45:28.788" endtime="20240415 12:45:28.818"/>
</kw>
<status status="PASS" starttime="20240415 12:45:28.788" endtime="20240415 12:45:28.818"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:45:28.818" endtime="20240415 12:45:28.818"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:45:28.818" endtime="20240415 12:45:28.818"/>
</branch>
<status status="PASS" starttime="20240415 12:45:28.788" endtime="20240415 12:45:28.818"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:45:28.848" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:45:28.818" endtime="20240415 12:45:28.853"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:45:28.853" endtime="20240415 12:45:29.666"/>
</kw>
<status status="PASS" starttime="20240415 12:45:05.803" endtime="20240415 12:45:29.666"/>
</iter>
<iter>
<var name="${index}">19</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:45:29.667" level="INFO">${TitleElement} = (//a[@class="title"])[19]</msg>
<status status="PASS" starttime="20240415 12:45:29.666" endtime="20240415 12:45:29.667"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:45:29.667" endtime="20240415 12:45:29.706"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:45:29.706" level="INFO">Clicking element '(//a[@class="title"])[19]'.</msg>
<status status="PASS" starttime="20240415 12:45:29.706" endtime="20240415 12:45:53.481"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:45:53.481" endtime="20240415 12:45:53.521"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:45:53.554" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:45:53.521" endtime="20240415 12:45:53.554"/>
</kw>
<msg timestamp="20240415 12:45:53.554" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:45:53.521" endtime="20240415 12:45:53.554"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:45:53.584" level="INFO">${abstractTxt} = Model checkers frequently fail to completely verify a concurrent program, even if partial-order reduction is applied. The verification engineer is left in doubt whether the program is safe and the eff...</msg>
<status status="PASS" starttime="20240415 12:45:53.554" endtime="20240415 12:45:53.584"/>
</kw>
<status status="PASS" starttime="20240415 12:45:53.554" endtime="20240415 12:45:53.584"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:45:53.584" endtime="20240415 12:45:53.584"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:45:53.584" endtime="20240415 12:45:53.584"/>
</branch>
<status status="PASS" starttime="20240415 12:45:53.554" endtime="20240415 12:45:53.584"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:45:53.614" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:45:53.584" endtime="20240415 12:45:53.619"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:45:53.620" endtime="20240415 12:45:54.470"/>
</kw>
<status status="PASS" starttime="20240415 12:45:29.666" endtime="20240415 12:45:54.470"/>
</iter>
<status status="PASS" starttime="20240415 12:37:38.474" endtime="20240415 12:45:54.470"/>
</for>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${nextBTN}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:45:54.472" level="INFO">Clicking element '//*[@id="kb-nav--main"]/div[4]/form/a/img'.</msg>
<status status="PASS" starttime="20240415 12:45:54.470" endtime="20240415 12:45:56.137"/>
</kw>
<status status="PASS" starttime="20240415 12:37:38.379" endtime="20240415 12:45:56.138"/>
</iter>
<iter>
<var name="${page}">5</var>
<kw name="Get Element Count" library="SeleniumLibrary">
<var>${NumOfTitleInPage}</var>
<arg>${title}</arg>
<doc>Returns the number of elements matching ``locator``.</doc>
<msg timestamp="20240415 12:45:56.174" level="INFO">${NumOfTitleInPage} = 20</msg>
<status status="PASS" starttime="20240415 12:45:56.138" endtime="20240415 12:45:56.174"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>1</value>
<value>${NumOfTitleInPage}</value>
<iter>
<var name="${index}">1</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:45:56.174" level="INFO">${TitleElement} = (//a[@class="title"])[1]</msg>
<status status="PASS" starttime="20240415 12:45:56.174" endtime="20240415 12:45:56.174"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:45:56.174" endtime="20240415 12:45:56.204"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:45:56.204" level="INFO">Clicking element '(//a[@class="title"])[1]'.</msg>
<status status="PASS" starttime="20240415 12:45:56.204" endtime="20240415 12:46:19.114"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:46:19.114" endtime="20240415 12:46:19.170"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:46:19.201" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:46:19.170" endtime="20240415 12:46:19.202"/>
</kw>
<msg timestamp="20240415 12:46:19.202" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:46:19.170" endtime="20240415 12:46:19.202"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:46:19.229" level="INFO">${abstractTxt} = We present an experience report on automating the verification of the software barrier synchronization primitive. The informal specification of the primitive is: when a thread calls the software barri...</msg>
<status status="PASS" starttime="20240415 12:46:19.202" endtime="20240415 12:46:19.229"/>
</kw>
<status status="PASS" starttime="20240415 12:46:19.202" endtime="20240415 12:46:19.230"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:46:19.230" endtime="20240415 12:46:19.230"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:46:19.230" endtime="20240415 12:46:19.230"/>
</branch>
<status status="PASS" starttime="20240415 12:46:19.202" endtime="20240415 12:46:19.230"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:46:19.252" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:46:19.230" endtime="20240415 12:46:19.256"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:46:19.257" endtime="20240415 12:46:35.279"/>
</kw>
<status status="PASS" starttime="20240415 12:45:56.174" endtime="20240415 12:46:35.279"/>
</iter>
<iter>
<var name="${index}">2</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:46:35.280" level="INFO">${TitleElement} = (//a[@class="title"])[2]</msg>
<status status="PASS" starttime="20240415 12:46:35.280" endtime="20240415 12:46:35.280"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:46:35.280" endtime="20240415 12:46:35.387"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:46:35.388" level="INFO">Clicking element '(//a[@class="title"])[2]'.</msg>
<status status="PASS" starttime="20240415 12:46:35.387" endtime="20240415 12:46:57.864"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:46:57.865" endtime="20240415 12:46:57.926"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:46:57.955" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:46:57.927" endtime="20240415 12:46:57.955"/>
</kw>
<msg timestamp="20240415 12:46:57.955" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:46:57.927" endtime="20240415 12:46:57.955"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:46:57.978" level="INFO">${abstractTxt} = Research on P2P data structures has tacitly assumed that peers readily participate in the work, i.e., are cooperative. But such participation is voluntary, and free riding is the dominant strategy. Th...</msg>
<status status="PASS" starttime="20240415 12:46:57.956" endtime="20240415 12:46:57.978"/>
</kw>
<status status="PASS" starttime="20240415 12:46:57.955" endtime="20240415 12:46:57.979"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:46:57.979" endtime="20240415 12:46:57.979"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:46:57.979" endtime="20240415 12:46:57.979"/>
</branch>
<status status="PASS" starttime="20240415 12:46:57.955" endtime="20240415 12:46:57.979"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:46:57.994" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:46:57.979" endtime="20240415 12:46:57.994"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:46:57.994" endtime="20240415 12:46:58.933"/>
</kw>
<status status="PASS" starttime="20240415 12:46:35.280" endtime="20240415 12:46:58.933"/>
</iter>
<iter>
<var name="${index}">3</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:46:58.934" level="INFO">${TitleElement} = (//a[@class="title"])[3]</msg>
<status status="PASS" starttime="20240415 12:46:58.933" endtime="20240415 12:46:58.935"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:46:58.935" endtime="20240415 12:46:59.044"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:46:59.045" level="INFO">Clicking element '(//a[@class="title"])[3]'.</msg>
<status status="PASS" starttime="20240415 12:46:59.044" endtime="20240415 12:47:21.766"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:47:21.766" endtime="20240415 12:47:21.813"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:47:21.842" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:47:21.813" endtime="20240415 12:47:21.843"/>
</kw>
<msg timestamp="20240415 12:47:21.843" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:47:21.813" endtime="20240415 12:47:21.843"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:47:21.866" level="INFO">${abstractTxt} = In many real-time applications, the set of tasks in the system, as well as the characteristics of the tasks, change during system execution. Specifically, the system moves from one mode of execution t...</msg>
<status status="PASS" starttime="20240415 12:47:21.843" endtime="20240415 12:47:21.866"/>
</kw>
<status status="PASS" starttime="20240415 12:47:21.843" endtime="20240415 12:47:21.866"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:47:21.867" endtime="20240415 12:47:21.867"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:47:21.866" endtime="20240415 12:47:21.867"/>
</branch>
<status status="PASS" starttime="20240415 12:47:21.843" endtime="20240415 12:47:21.867"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:47:21.887" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:47:21.867" endtime="20240415 12:47:21.891"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:47:21.892" endtime="20240415 12:47:22.742"/>
</kw>
<status status="PASS" starttime="20240415 12:46:58.933" endtime="20240415 12:47:22.742"/>
</iter>
<iter>
<var name="${index}">4</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:47:22.743" level="INFO">${TitleElement} = (//a[@class="title"])[4]</msg>
<status status="PASS" starttime="20240415 12:47:22.743" endtime="20240415 12:47:22.743"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:47:22.743" endtime="20240415 12:47:22.872"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:47:22.873" level="INFO">Clicking element '(//a[@class="title"])[4]'.</msg>
<status status="PASS" starttime="20240415 12:47:22.872" endtime="20240415 12:47:45.497"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:47:45.497" endtime="20240415 12:47:45.541"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:47:45.574" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:47:45.541" endtime="20240415 12:47:45.574"/>
</kw>
<msg timestamp="20240415 12:47:45.574" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:47:45.541" endtime="20240415 12:47:45.574"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:47:45.602" level="INFO">${abstractTxt} = The issues surrounding the question of atomicity, both in the past and nowadays, are briefly reviewed, and a picture of an ACID (atomic, consistent, isolated, durable) transaction as a refinement prob...</msg>
<status status="PASS" starttime="20240415 12:47:45.574" endtime="20240415 12:47:45.602"/>
</kw>
<status status="PASS" starttime="20240415 12:47:45.574" endtime="20240415 12:47:45.602"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:47:45.603" endtime="20240415 12:47:45.603"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:47:45.603" endtime="20240415 12:47:45.603"/>
</branch>
<status status="PASS" starttime="20240415 12:47:45.574" endtime="20240415 12:47:45.603"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:47:45.644" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:47:45.603" endtime="20240415 12:47:45.654"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:47:45.654" endtime="20240415 12:47:46.558"/>
</kw>
<status status="PASS" starttime="20240415 12:47:22.742" endtime="20240415 12:47:46.558"/>
</iter>
<iter>
<var name="${index}">5</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:47:46.559" level="INFO">${TitleElement} = (//a[@class="title"])[5]</msg>
<status status="PASS" starttime="20240415 12:47:46.559" endtime="20240415 12:47:46.559"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:47:46.560" endtime="20240415 12:47:46.622"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:47:46.624" level="INFO">Clicking element '(//a[@class="title"])[5]'.</msg>
<status status="PASS" starttime="20240415 12:47:46.622" endtime="20240415 12:48:17.999"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:48:18.000" endtime="20240415 12:48:18.061"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:48:18.094" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:48:18.062" endtime="20240415 12:48:18.094"/>
</kw>
<msg timestamp="20240415 12:48:18.094" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:48:18.062" endtime="20240415 12:48:18.094"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:48:18.119" level="INFO">${abstractTxt} = This paper describes a security architecture for mobile agent based systems. It defines the notion of a security-enhanced agent and outlines security management components in agent platform bases and ...</msg>
<status status="PASS" starttime="20240415 12:48:18.094" endtime="20240415 12:48:18.119"/>
</kw>
<status status="PASS" starttime="20240415 12:48:18.094" endtime="20240415 12:48:18.120"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:48:18.120" endtime="20240415 12:48:18.120"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:48:18.120" endtime="20240415 12:48:18.120"/>
</branch>
<status status="PASS" starttime="20240415 12:48:18.094" endtime="20240415 12:48:18.120"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:48:18.143" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:48:18.120" endtime="20240415 12:48:18.148"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:48:18.149" endtime="20240415 12:48:18.881"/>
</kw>
<status status="PASS" starttime="20240415 12:47:46.558" endtime="20240415 12:48:18.881"/>
</iter>
<iter>
<var name="${index}">6</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:48:18.882" level="INFO">${TitleElement} = (//a[@class="title"])[6]</msg>
<status status="PASS" starttime="20240415 12:48:18.881" endtime="20240415 12:48:18.882"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:48:18.882" endtime="20240415 12:48:18.900"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:48:18.900" level="INFO">Clicking element '(//a[@class="title"])[6]'.</msg>
<status status="PASS" starttime="20240415 12:48:18.900" endtime="20240415 12:49:09.401"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:49:09.401" endtime="20240415 12:49:09.458"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:49:09.491" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:49:09.458" endtime="20240415 12:49:09.491"/>
</kw>
<msg timestamp="20240415 12:49:09.492" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:49:09.458" endtime="20240415 12:49:09.492"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:49:09.517" level="INFO">${abstractTxt} = This paper discusses the considerations that have played a role in the design of the language POOL2. This language integrates the structuring techniques of object-oriented programming with mechanisms ...</msg>
<status status="PASS" starttime="20240415 12:49:09.492" endtime="20240415 12:49:09.517"/>
</kw>
<status status="PASS" starttime="20240415 12:49:09.492" endtime="20240415 12:49:09.517"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:49:09.517" endtime="20240415 12:49:09.517"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:49:09.517" endtime="20240415 12:49:09.517"/>
</branch>
<status status="PASS" starttime="20240415 12:49:09.492" endtime="20240415 12:49:09.517"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:49:09.535" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:49:09.518" endtime="20240415 12:49:09.535"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:49:09.535" endtime="20240415 12:49:10.625"/>
</kw>
<status status="PASS" starttime="20240415 12:48:18.881" endtime="20240415 12:49:10.625"/>
</iter>
<iter>
<var name="${index}">7</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:49:10.626" level="INFO">${TitleElement} = (//a[@class="title"])[7]</msg>
<status status="PASS" starttime="20240415 12:49:10.626" endtime="20240415 12:49:10.626"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:49:10.627" endtime="20240415 12:49:10.707"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:49:10.708" level="INFO">Clicking element '(//a[@class="title"])[7]'.</msg>
<status status="PASS" starttime="20240415 12:49:10.707" endtime="20240415 12:49:33.627"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:49:33.628" endtime="20240415 12:49:33.665"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:49:33.696" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:49:33.666" endtime="20240415 12:49:33.696"/>
</kw>
<msg timestamp="20240415 12:49:33.696" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:49:33.665" endtime="20240415 12:49:33.696"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:49:33.720" level="INFO">${abstractTxt} = Complex variable-structure systems (CVSSs) are a common type of complex systems that exhibit changes both at structural and behavior levels. Simulations of CVSSs challenge current collaborative execut...</msg>
<status status="PASS" starttime="20240415 12:49:33.697" endtime="20240415 12:49:33.720"/>
</kw>
<status status="PASS" starttime="20240415 12:49:33.696" endtime="20240415 12:49:33.720"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:49:33.720" endtime="20240415 12:49:33.720"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:49:33.720" endtime="20240415 12:49:33.720"/>
</branch>
<status status="PASS" starttime="20240415 12:49:33.696" endtime="20240415 12:49:33.720"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:49:33.738" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:49:33.720" endtime="20240415 12:49:33.745"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:49:33.746" endtime="20240415 12:49:34.827"/>
</kw>
<status status="PASS" starttime="20240415 12:49:10.625" endtime="20240415 12:49:34.827"/>
</iter>
<iter>
<var name="${index}">8</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:49:34.828" level="INFO">${TitleElement} = (//a[@class="title"])[8]</msg>
<status status="PASS" starttime="20240415 12:49:34.828" endtime="20240415 12:49:34.828"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:49:34.828" endtime="20240415 12:49:34.956"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:49:34.958" level="INFO">Clicking element '(//a[@class="title"])[8]'.</msg>
<status status="PASS" starttime="20240415 12:49:34.957" endtime="20240415 12:49:57.408"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:49:57.408" endtime="20240415 12:49:57.499"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:49:57.563" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:49:57.500" endtime="20240415 12:49:57.563"/>
</kw>
<msg timestamp="20240415 12:49:57.563" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:49:57.499" endtime="20240415 12:49:57.563"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:49:57.593" level="INFO">${abstractTxt} = Data centers are major contributors to the emission of carbon dioxide to the atmosphere, and this contribution is expected to increase in the following years. This has encouraged the development of te...</msg>
<status status="PASS" starttime="20240415 12:49:57.563" endtime="20240415 12:49:57.593"/>
</kw>
<status status="PASS" starttime="20240415 12:49:57.563" endtime="20240415 12:49:57.593"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:49:57.593" endtime="20240415 12:49:57.593"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:49:57.593" endtime="20240415 12:49:57.593"/>
</branch>
<status status="PASS" starttime="20240415 12:49:57.563" endtime="20240415 12:49:57.593"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:49:57.608" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:49:57.593" endtime="20240415 12:49:57.623"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:49:57.623" endtime="20240415 12:49:58.533"/>
</kw>
<status status="PASS" starttime="20240415 12:49:34.827" endtime="20240415 12:49:58.533"/>
</iter>
<iter>
<var name="${index}">9</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:49:58.534" level="INFO">${TitleElement} = (//a[@class="title"])[9]</msg>
<status status="PASS" starttime="20240415 12:49:58.534" endtime="20240415 12:49:58.535"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:49:58.535" endtime="20240415 12:49:58.641"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:49:58.642" level="INFO">Clicking element '(//a[@class="title"])[9]'.</msg>
<status status="PASS" starttime="20240415 12:49:58.641" endtime="20240415 12:50:21.280"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:50:21.280" endtime="20240415 12:50:21.332"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:50:21.374" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:50:21.333" endtime="20240415 12:50:21.374"/>
</kw>
<msg timestamp="20240415 12:50:21.374" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:50:21.332" endtime="20240415 12:50:21.374"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:50:21.400" level="INFO">${abstractTxt} = The past 10 years has seen an explosion of interest for the area of science and technology labelled “nanotechnology.” Although at an early stage, nanotechnology is providing a space for the creation o...</msg>
<status status="PASS" starttime="20240415 12:50:21.375" endtime="20240415 12:50:21.400"/>
</kw>
<status status="PASS" starttime="20240415 12:50:21.375" endtime="20240415 12:50:21.400"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:50:21.400" endtime="20240415 12:50:21.401"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:50:21.400" endtime="20240415 12:50:21.401"/>
</branch>
<status status="PASS" starttime="20240415 12:50:21.375" endtime="20240415 12:50:21.401"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:50:21.423" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:50:21.401" endtime="20240415 12:50:21.423"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:50:21.423" endtime="20240415 12:50:22.387"/>
</kw>
<status status="PASS" starttime="20240415 12:49:58.534" endtime="20240415 12:50:22.387"/>
</iter>
<iter>
<var name="${index}">10</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:50:22.388" level="INFO">${TitleElement} = (//a[@class="title"])[10]</msg>
<status status="PASS" starttime="20240415 12:50:22.387" endtime="20240415 12:50:22.388"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:50:22.388" endtime="20240415 12:50:22.429"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:50:22.430" level="INFO">Clicking element '(//a[@class="title"])[10]'.</msg>
<status status="PASS" starttime="20240415 12:50:22.429" endtime="20240415 12:50:45.007"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:50:45.008" endtime="20240415 12:50:45.057"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:50:45.085" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:50:45.058" endtime="20240415 12:50:45.085"/>
</kw>
<msg timestamp="20240415 12:50:45.085" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:50:45.058" endtime="20240415 12:50:45.085"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:50:45.112" level="INFO">${abstractTxt} = The Quantified Constraint Satisfaction Problem (QCSP) extends classical CSP in a way which allows reasoning about uncertainty. In this paper I present novel algorithms for solving QCSP. Firstly I pres...</msg>
<status status="PASS" starttime="20240415 12:50:45.086" endtime="20240415 12:50:45.112"/>
</kw>
<status status="PASS" starttime="20240415 12:50:45.085" endtime="20240415 12:50:45.112"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:50:45.113" endtime="20240415 12:50:45.113"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:50:45.113" endtime="20240415 12:50:45.113"/>
</branch>
<status status="PASS" starttime="20240415 12:50:45.085" endtime="20240415 12:50:45.113"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:50:45.135" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:50:45.113" endtime="20240415 12:50:45.139"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:50:45.139" endtime="20240415 12:50:46.115"/>
</kw>
<status status="PASS" starttime="20240415 12:50:22.387" endtime="20240415 12:50:46.115"/>
</iter>
<iter>
<var name="${index}">11</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:50:46.116" level="INFO">${TitleElement} = (//a[@class="title"])[11]</msg>
<status status="PASS" starttime="20240415 12:50:46.116" endtime="20240415 12:50:46.116"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:50:46.117" endtime="20240415 12:50:46.267"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:50:46.269" level="INFO">Clicking element '(//a[@class="title"])[11]'.</msg>
<status status="PASS" starttime="20240415 12:50:46.268" endtime="20240415 12:51:08.648"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:51:08.649" endtime="20240415 12:51:08.706"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:51:08.737" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:51:08.706" endtime="20240415 12:51:08.738"/>
</kw>
<msg timestamp="20240415 12:51:08.738" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:51:08.706" endtime="20240415 12:51:08.738"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:51:08.760" level="INFO">${abstractTxt} = An elementary correctness proof for Ben-Ari's algorithm (1984) for incremental garbage collection is given. We give a new algorithm for systems in which there are multiple mutators and a proof of its ...</msg>
<status status="PASS" starttime="20240415 12:51:08.738" endtime="20240415 12:51:08.760"/>
</kw>
<status status="PASS" starttime="20240415 12:51:08.738" endtime="20240415 12:51:08.761"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:51:08.761" endtime="20240415 12:51:08.761"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:51:08.761" endtime="20240415 12:51:08.761"/>
</branch>
<status status="PASS" starttime="20240415 12:51:08.738" endtime="20240415 12:51:08.761"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:51:08.777" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:51:08.761" endtime="20240415 12:51:08.786"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:51:08.786" endtime="20240415 12:51:09.721"/>
</kw>
<status status="PASS" starttime="20240415 12:50:46.115" endtime="20240415 12:51:09.721"/>
</iter>
<iter>
<var name="${index}">12</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:51:09.722" level="INFO">${TitleElement} = (//a[@class="title"])[12]</msg>
<status status="PASS" starttime="20240415 12:51:09.721" endtime="20240415 12:51:09.722"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:51:09.722" endtime="20240415 12:51:09.803"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:51:09.804" level="INFO">Clicking element '(//a[@class="title"])[12]'.</msg>
<status status="PASS" starttime="20240415 12:51:09.803" endtime="20240415 12:51:32.644"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:51:32.644" endtime="20240415 12:51:32.706"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:51:32.737" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:51:32.706" endtime="20240415 12:51:32.737"/>
</kw>
<msg timestamp="20240415 12:51:32.737" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:51:32.706" endtime="20240415 12:51:32.737"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:51:32.761" level="INFO">${abstractTxt} = We present the design and implementation of a parallel algorithm for computing Gröbner bases on distributed memory multiprocessors. The parallel algorithm is irregular both in space and time: the data...</msg>
<status status="PASS" starttime="20240415 12:51:32.737" endtime="20240415 12:51:32.761"/>
</kw>
<status status="PASS" starttime="20240415 12:51:32.737" endtime="20240415 12:51:32.761"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:51:32.762" endtime="20240415 12:51:32.762"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:51:32.761" endtime="20240415 12:51:32.762"/>
</branch>
<status status="PASS" starttime="20240415 12:51:32.737" endtime="20240415 12:51:32.762"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:51:32.777" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:51:32.762" endtime="20240415 12:51:32.777"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:51:32.777" endtime="20240415 12:51:33.720"/>
</kw>
<status status="PASS" starttime="20240415 12:51:09.721" endtime="20240415 12:51:33.720"/>
</iter>
<iter>
<var name="${index}">13</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:51:33.721" level="INFO">${TitleElement} = (//a[@class="title"])[13]</msg>
<status status="PASS" starttime="20240415 12:51:33.721" endtime="20240415 12:51:33.721"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:51:33.721" endtime="20240415 12:51:33.876"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:51:33.878" level="INFO">Clicking element '(//a[@class="title"])[13]'.</msg>
<status status="PASS" starttime="20240415 12:51:33.876" endtime="20240415 12:51:56.785"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:51:56.786" endtime="20240415 12:51:56.835"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:51:56.870" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:51:56.836" endtime="20240415 12:51:56.870"/>
</kw>
<msg timestamp="20240415 12:51:56.870" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:51:56.836" endtime="20240415 12:51:56.870"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:51:56.894" level="INFO">${abstractTxt} = We study the behavior of Range Voting and Normalized Range Voting with respect to electoral control. Electoral control encompasses attempts from an election chair to alter the participation or structu...</msg>
<status status="PASS" starttime="20240415 12:51:56.870" endtime="20240415 12:51:56.894"/>
</kw>
<status status="PASS" starttime="20240415 12:51:56.870" endtime="20240415 12:51:56.894"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:51:56.894" endtime="20240415 12:51:56.894"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:51:56.894" endtime="20240415 12:51:56.894"/>
</branch>
<status status="PASS" starttime="20240415 12:51:56.870" endtime="20240415 12:51:56.894"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:51:56.916" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:51:56.894" endtime="20240415 12:51:56.920"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:51:56.920" endtime="20240415 12:51:57.836"/>
</kw>
<status status="PASS" starttime="20240415 12:51:33.720" endtime="20240415 12:51:57.836"/>
</iter>
<iter>
<var name="${index}">14</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:51:57.837" level="INFO">${TitleElement} = (//a[@class="title"])[14]</msg>
<status status="PASS" starttime="20240415 12:51:57.836" endtime="20240415 12:51:57.837"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:51:57.837" endtime="20240415 12:51:57.985"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:51:57.987" level="INFO">Clicking element '(//a[@class="title"])[14]'.</msg>
<status status="PASS" starttime="20240415 12:51:57.986" endtime="20240415 12:52:20.541"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:52:20.541" endtime="20240415 12:52:20.589"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:52:20.622" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:52:20.589" endtime="20240415 12:52:20.622"/>
</kw>
<msg timestamp="20240415 12:52:20.622" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:52:20.589" endtime="20240415 12:52:20.622"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:52:20.653" level="INFO">${abstractTxt} = A priority inversion occurs when a low-priority task causes the execution of a higher-priority task to be delayed. The possibility of priority inversions complicates the analysis of systems that use p...</msg>
<status status="PASS" starttime="20240415 12:52:20.623" endtime="20240415 12:52:20.653"/>
</kw>
<status status="PASS" starttime="20240415 12:52:20.622" endtime="20240415 12:52:20.653"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:52:20.653" endtime="20240415 12:52:20.653"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:52:20.653" endtime="20240415 12:52:20.653"/>
</branch>
<status status="PASS" starttime="20240415 12:52:20.622" endtime="20240415 12:52:20.653"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:52:20.663" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:52:20.653" endtime="20240415 12:52:20.675"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:52:20.675" endtime="20240415 12:52:21.584"/>
</kw>
<status status="PASS" starttime="20240415 12:51:57.836" endtime="20240415 12:52:21.584"/>
</iter>
<iter>
<var name="${index}">15</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:52:21.586" level="INFO">${TitleElement} = (//a[@class="title"])[15]</msg>
<status status="PASS" starttime="20240415 12:52:21.585" endtime="20240415 12:52:21.586"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:52:21.586" endtime="20240415 12:52:21.716"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:52:21.718" level="INFO">Clicking element '(//a[@class="title"])[15]'.</msg>
<status status="PASS" starttime="20240415 12:52:21.716" endtime="20240415 12:52:46.519"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:52:46.520" endtime="20240415 12:52:46.568"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:52:46.600" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:52:46.569" endtime="20240415 12:52:46.600"/>
</kw>
<msg timestamp="20240415 12:52:46.600" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:52:46.569" endtime="20240415 12:52:46.600"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:52:46.630" level="INFO">${abstractTxt} = In general computing systems, a job (process/task) may suspend itself whilst it is waiting for some activity to complete, e.g., an accelerator to return data. In real-time systems, such self-suspensio...</msg>
<status status="PASS" starttime="20240415 12:52:46.601" endtime="20240415 12:52:46.630"/>
</kw>
<status status="PASS" starttime="20240415 12:52:46.601" endtime="20240415 12:52:46.630"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:52:46.630" endtime="20240415 12:52:46.630"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:52:46.630" endtime="20240415 12:52:46.630"/>
</branch>
<status status="PASS" starttime="20240415 12:52:46.601" endtime="20240415 12:52:46.630"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:52:46.649" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:52:46.630" endtime="20240415 12:52:46.659"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:52:46.660" endtime="20240415 12:52:47.663"/>
</kw>
<status status="PASS" starttime="20240415 12:52:21.585" endtime="20240415 12:52:47.663"/>
</iter>
<iter>
<var name="${index}">16</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:52:47.665" level="INFO">${TitleElement} = (//a[@class="title"])[16]</msg>
<status status="PASS" starttime="20240415 12:52:47.664" endtime="20240415 12:52:47.665"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:52:47.665" endtime="20240415 12:52:47.762"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:52:47.763" level="INFO">Clicking element '(//a[@class="title"])[16]'.</msg>
<status status="PASS" starttime="20240415 12:52:47.762" endtime="20240415 12:53:10.956"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:53:10.957" endtime="20240415 12:53:11.024"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:53:11.063" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:53:11.025" endtime="20240415 12:53:11.063"/>
</kw>
<msg timestamp="20240415 12:53:11.063" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:53:11.024" endtime="20240415 12:53:11.063"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:53:11.099" level="INFO">${abstractTxt} = We propose a novel distributed algorithm for the minimum cut problem. Motivated by applications like volumetric segmentation in computer vision, we aim at solving large sparse problems. When the probl...</msg>
<status status="PASS" starttime="20240415 12:53:11.064" endtime="20240415 12:53:11.099"/>
</kw>
<status status="PASS" starttime="20240415 12:53:11.064" endtime="20240415 12:53:11.099"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:53:11.099" endtime="20240415 12:53:11.099"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:53:11.099" endtime="20240415 12:53:11.099"/>
</branch>
<status status="PASS" starttime="20240415 12:53:11.064" endtime="20240415 12:53:11.099"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:53:11.114" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:53:11.099" endtime="20240415 12:53:11.124"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:53:11.125" endtime="20240415 12:53:12.089"/>
</kw>
<status status="PASS" starttime="20240415 12:52:47.664" endtime="20240415 12:53:12.089"/>
</iter>
<iter>
<var name="${index}">17</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:53:12.090" level="INFO">${TitleElement} = (//a[@class="title"])[17]</msg>
<status status="PASS" starttime="20240415 12:53:12.089" endtime="20240415 12:53:12.090"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:53:12.090" endtime="20240415 12:53:12.221"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:53:12.222" level="INFO">Clicking element '(//a[@class="title"])[17]'.</msg>
<status status="PASS" starttime="20240415 12:53:12.222" endtime="20240415 12:53:34.826"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:53:34.827" endtime="20240415 12:53:34.875"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:53:35.015" level="INFO" html="true">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="selenium-screenshot-19.png"&gt;&lt;img src="selenium-screenshot-19.png" width="800px"&gt;&lt;/a&gt;</msg>
<msg timestamp="20240415 12:53:35.015" level="FAIL">Element with locator '//*[@id="Abs1-content"]/p' not found.</msg>
<status status="FAIL" starttime="20240415 12:53:34.876" endtime="20240415 12:53:35.015"/>
</kw>
<msg timestamp="20240415 12:53:35.015" level="INFO">${FirstType} = False</msg>
<status status="PASS" starttime="20240415 12:53:34.875" endtime="20240415 12:53:35.015"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:53:35.015" endtime="20240415 12:53:35.015"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:53:35.015" endtime="20240415 12:53:35.015"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:53:35.045" level="INFO">${abstractTxt} = This paper is concerned with the design of online scheduling algorithms that exploit extra resources. In particular, it studies how to make use of multiple processors to counteract the lack of future ...</msg>
<status status="PASS" starttime="20240415 12:53:35.015" endtime="20240415 12:53:35.045"/>
</kw>
<status status="PASS" starttime="20240415 12:53:35.015" endtime="20240415 12:53:35.045"/>
</branch>
<status status="PASS" starttime="20240415 12:53:35.015" endtime="20240415 12:53:35.045"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:53:35.075" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:53:35.045" endtime="20240415 12:53:35.082"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:53:35.082" endtime="20240415 12:53:36.006"/>
</kw>
<status status="PASS" starttime="20240415 12:53:12.089" endtime="20240415 12:53:36.006"/>
</iter>
<iter>
<var name="${index}">18</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:53:36.007" level="INFO">${TitleElement} = (//a[@class="title"])[18]</msg>
<status status="PASS" starttime="20240415 12:53:36.007" endtime="20240415 12:53:36.008"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:53:36.008" endtime="20240415 12:53:36.094"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:53:36.094" level="INFO">Clicking element '(//a[@class="title"])[18]'.</msg>
<status status="PASS" starttime="20240415 12:53:36.094" endtime="20240415 12:53:58.963"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:53:58.963" endtime="20240415 12:53:59.001"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:53:59.044" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:53:59.001" endtime="20240415 12:53:59.044"/>
</kw>
<msg timestamp="20240415 12:53:59.044" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:53:59.001" endtime="20240415 12:53:59.044"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:53:59.077" level="INFO">${abstractTxt} = We present a technique for analyzing the number of cache misses incurred by multithreaded cache oblivious algorithms on an idealized parallel machine in which each processor has a private cache. We sp...</msg>
<status status="PASS" starttime="20240415 12:53:59.044" endtime="20240415 12:53:59.077"/>
</kw>
<status status="PASS" starttime="20240415 12:53:59.044" endtime="20240415 12:53:59.078"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:53:59.078" endtime="20240415 12:53:59.078"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:53:59.078" endtime="20240415 12:53:59.078"/>
</branch>
<status status="PASS" starttime="20240415 12:53:59.044" endtime="20240415 12:53:59.078"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:53:59.100" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:53:59.078" endtime="20240415 12:53:59.104"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:53:59.105" endtime="20240415 12:53:59.985"/>
</kw>
<status status="PASS" starttime="20240415 12:53:36.006" endtime="20240415 12:53:59.986"/>
</iter>
<iter>
<var name="${index}">19</var>
<kw name="Catenate" library="BuiltIn">
<var>${TitleElement}</var>
<arg>SEPARATOR=</arg>
<arg>${title}</arg>
<arg>[${index}]</arg>
<doc>Catenates the given items together and returns the resulted string.</doc>
<msg timestamp="20240415 12:53:59.987" level="INFO">${TitleElement} = (//a[@class="title"])[19]</msg>
<status status="PASS" starttime="20240415 12:53:59.986" endtime="20240415 12:53:59.987"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:53:59.987" endtime="20240415 12:54:00.122"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${TitleElement}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:54:00.123" level="INFO">Clicking element '(//a[@class="title"])[19]'.</msg>
<status status="PASS" starttime="20240415 12:54:00.122" endtime="20240415 12:54:22.909"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${header}</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20240415 12:54:22.909" endtime="20240415 12:54:22.949"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${FirstType}</var>
<arg>Element Should Be Visible</arg>
<arg>${abstract1}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${abstract1}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20240415 12:54:22.979" level="INFO">Element '//*[@id="Abs1-content"]/p' is displayed.</msg>
<status status="PASS" starttime="20240415 12:54:22.950" endtime="20240415 12:54:22.979"/>
</kw>
<msg timestamp="20240415 12:54:22.980" level="INFO">${FirstType} = True</msg>
<status status="PASS" starttime="20240415 12:54:22.950" endtime="20240415 12:54:22.980"/>
</kw>
<if>
<branch type="IF" condition="${FirstType}">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract1}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:54:23.004" level="INFO">${abstractTxt} = Parallelizing (compute-intensive) discrete event simulation (DES) applications is a classical approach for speeding up their execution and for making very large/complex simulation models tractable. Th...</msg>
<status status="PASS" starttime="20240415 12:54:22.980" endtime="20240415 12:54:23.004"/>
</kw>
<status status="PASS" starttime="20240415 12:54:22.980" endtime="20240415 12:54:23.004"/>
</branch>
<branch type="ELSE">
<kw name="Get Text" library="SeleniumLibrary">
<var>${abstractTxt}</var>
<arg>${abstract2}</arg>
<doc>Returns the text value of the element identified by ``locator``.</doc>
<status status="NOT RUN" starttime="20240415 12:54:23.004" endtime="20240415 12:54:23.005"/>
</kw>
<status status="NOT RUN" starttime="20240415 12:54:23.004" endtime="20240415 12:54:23.005"/>
</branch>
<status status="PASS" starttime="20240415 12:54:22.980" endtime="20240415 12:54:23.005"/>
</if>
<kw name="Add To Csv" library="AddToCSV">
<arg>${abstractTxt}</arg>
<arg>${index}</arg>
<arg>${File}</arg>
<msg timestamp="20240415 12:54:23.021" level="INFO">C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df["abstract"][index-1]=abstract
C:\Users\ftmh\SpringerAbstractExtractor\AddToCSV.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df["abstract"][index-1]=abstract</msg>
<status status="PASS" starttime="20240415 12:54:23.005" endtime="20240415 12:54:23.029"/>
</kw>
<kw name="Go Back" library="SeleniumLibrary">
<doc>Simulates the user clicking the back button on their browser.</doc>
<status status="PASS" starttime="20240415 12:54:23.029" endtime="20240415 12:54:23.882"/>
</kw>
<status status="PASS" starttime="20240415 12:53:59.986" endtime="20240415 12:54:23.882"/>
</iter>
<status status="PASS" starttime="20240415 12:45:56.174" endtime="20240415 12:54:23.882"/>
</for>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${nextBTN}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20240415 12:54:23.884" level="INFO">Clicking element '//*[@id="kb-nav--main"]/div[4]/form/a/img'.</msg>
<status status="PASS" starttime="20240415 12:54:23.882" endtime="20240415 12:54:25.683"/>
</kw>
<status status="PASS" starttime="20240415 12:45:56.138" endtime="20240415 12:54:25.683"/>
</iter>
<status status="PASS" starttime="20240415 12:02:50.318" endtime="20240415 12:54:25.683"/>
</for>
<status status="PASS" starttime="20240415 12:02:19.049" endtime="20240415 12:54:25.684"/>
</kw>
<status status="PASS" starttime="20240415 12:02:19.048" endtime="20240415 12:54:25.688"/>
</test>
<doc>add abstract in excel file</doc>
<status status="PASS" starttime="20240415 12:02:06.459" endtime="20240415 12:54:25.696"/>
</suite>
<statistics>
<total>
<stat pass="1" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" skip="0" id="s1" name="Extract">Extract</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
